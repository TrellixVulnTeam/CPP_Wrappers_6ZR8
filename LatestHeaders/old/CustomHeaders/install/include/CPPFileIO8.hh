#ifndef CPPFileIO_HH
#define CPPFileIO_HH
#define _GNU_SOURCE

/////////////////////////
#include <sched.h> //////
/////////////////////////
#include <stdio.h> //////
#include <time.h>   /////
#include <stdlib.h> /////
#include <string.h> /////
#include <sys/types.h> //
#include <sys/wait.h> ///
#include <sys/stat.h> ///
#include <sys/mman.h> ///
#include <fcntl.h> //////
#include <unistd.h> /////
#include <math.h> ///////
#include <string.h> /////
/////////////////////////
#include <iostream> /////
#include <vector> ///////
#include <algorithm> ////
#include <random> ///////
#include <complex> //////
/////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace CPPFileIO { //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Pointer Management: /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const char junk_address = 0 ; //////////////////////////////////////////////////////////////////////////////////////////////////
    const bool DEBUG = false; //////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> inline void set_junked  ( T * & inptr ) { inptr=(T*)(&junk_address);} ////////////////////////////////////
    template <typename T> inline bool is_junked   ( T * & inptr ) { return (inptr==(T*)(&junk_address));} //////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> inline bool safe_delete ( T * & inptr ) { ////////////////////////////////////////////////////////////////
        if (!is_junked(inptr)) { delete inptr; set_junked(inptr); return true; } else {return false;} //////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> inline bool safe_delete_array ( T * & inptr ) { //////////////////////////////////////////////////////////
        if (!is_junked(inptr)) { delete[] inptr; set_junked(inptr); return true; } else {return false;} ////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline size_t shifter  (size_t in) {return (1<<in);} ///////////////////////////////////////////////////////////////////////////
    inline bool   checkbit (size_t inbits, size_t checkbits) {return ((inbits&checkbits)==checkbits);} /////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    size_t NTHREADS = 4 ; //////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Useful template functions : /////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> inline T    mymod  ( T   a         ) { if (a<0) { return -a ; } else { return a ; } } ////////////////////
    template <typename T> inline T    mymax  ( T   a , T   b ) { if (a<b) { return  b ; } else { return a ; } } ////////////////////
    template <typename T> inline T    mymin  ( T   a , T   b ) { if (a<b) { return  a ; } else { return b ; } } ////////////////////
    template <typename T> inline T    mysign ( T   a         ) { if (a<0) { return -1 ; } else { return 1 ; } } ////////////////////
    template <typename T> inline void myswap ( T & a , T & b ) { T tmp = b ; b = a ; a = tmp ;                } ////////////////////
    template <typename T> inline long myint  ( T   x         ) { return (long) x ;                            } ////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Some simple and essential mathematics functions: ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> inline T GCD (T a, T b) { ////////////////////////////////////////////////////////////////////////////////
        T ret ; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        while( (a!=0) && (b!=0) ) { ////////////////////////////////////////////////////////////////////////////////////////////////
            if (a>b) { a = a % b ; ret = b ; } /////////////////////////////////////////////////////////////////////////////////////
            else     { b = b % a ; ret = a ; } /////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        return ret; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> inline T LCM (T a, T b) { ////////////////////////////////////////////////////////////////////////////////
        T ret ; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ret = GCD(a,b); ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (ret>0) { ret = a * ( b / ret ) ; } /////////////////////////////////////////////////////////////////////////////////////
        return ret; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Some useful OS related functions : //////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void starter_self ( std::vector <std::string> & program ) { ////////////////////////////////////////////////////////////////////
        std::vector <char*> arrs ; /////////////////////////////////////////////////////////////////////////////////////////////////
        int j = program.size() ; ///////////////////////////////////////////////////////////////////////////////////////////////////
        arrs.resize(j+1); //////////////////////////////////////////////////////////////////////////////////////////////////////////
        for(int i=0;i<j;i++) { arrs[i] = & (program[i][0]) ; } /////////////////////////////////////////////////////////////////////
        arrs[j] = (char*) NULL ; ///////////////////////////////////////////////////////////////////////////////////////////////////
        execvp ( (const char *) arrs[0] , & (arrs[0]) ) ; //////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    pid_t starter_fork ( std::vector <std::string> & program ) { ///////////////////////////////////////////////////////////////////
        pid_t tmp_pid = fork(); ////////////////////////////////////////////////////////////////////////////////////////////////////
        if (tmp_pid==0) { starter_self (program) ; } ///////////////////////////////////////////////////////////////////////////////
        else { return tmp_pid ; } //////////////////////////////////////////////////////////////////////////////////////////////////
        return tmp_pid ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void waitonall (std::vector <pid_t> childs) { //////////////////////////////////////////////////////////////////////////////////
        for(int i=0;i<childs.size();i++) { pid_t tmp = waitpid ( (pid_t) childs[i] , (int *) NULL , (int) 0 ) ; } //////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class GetArgs { ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::vector <std::string> args ; ///////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        GetArgs  (int _argc, char ** _argv) {for(size_t i=0;i<_argc;i++){args.push_back(_argv[i]);}} ///////////////////////////////
        ~GetArgs ()                         {} /////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline std::string & operator () (size_t i) { return args[i]      ; } //////////////////////////////////////////////////////
        inline size_t        operator () ()         { return args.size () ; } //////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Nice Class to handel forking: ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class ForkMe { /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private: ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            std::vector <pid_t> kids  ; ////////////////////////////////////////////////////////////////////////////////////////////
            bool                child ; ////////////////////////////////////////////////////////////////////////////////////////////
            size_t              kid_count ; ////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            inline bool WaitOnKids () { ////////////////////////////////////////////////////////////////////////////////////////////
                if      ( child           ) { exit (0)         ; return false ;               } ////////////////////////////////////
                else if ( kids.size() > 0 ) { waitonall (kids) ; kids.clear() ; return true ; } ////////////////////////////////////
                else                        { return false     ;                              } ////////////////////////////////////
                kid_count = 1 ; ////////////////////////////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ForkMe  () { kids.clear () ; child = false ; kid_count = 1 ; } /////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ~ForkMe () { if (child) { exit (0) ; } else { WaitOnKids () ; } } //////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            inline bool InKid () { /////////////////////////////////////////////////////////////////////////////////////////////////
                if (!child){ ///////////////////////////////////////////////////////////////////////////////////////////////////////
                    pid_t tmp_pid = fork () ; //////////////////////////////////////////////////////////////////////////////////////
                    if (tmp_pid==0) { child = true             ; return true  ; } //////////////////////////////////////////////////
                    else            { kids.push_back (tmp_pid) ; kid_count++ ; return false ; } ////////////////////////////////////
                } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                else { exit (0) ; return false ; } /////////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            inline void operator () (size_t _count=1) { ////////////////////////////////////////////////////////////////////////////
                if(kid_count>_count) { WaitOnKids () ; } ///////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class starter { ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The main elements: //////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ForkMe forks ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Constructor and Destructor: /////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        starter  () {} /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~starter () {} /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The main functions: /////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void series (std::vector <std::string> & program) { ////////////////////////////////////////////////////////////////////////
            ForkMe tmp ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            if(tmp.InKid()) {starter_self(program);} ///////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void parallel (std::vector <std::string> & program) { //////////////////////////////////////////////////////////////////////
            if(forks.InKid()) {starter_self(program);} /////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void wait () {forks.WaitOnKids();} /////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // CPU AFFINITY RELATED: ///////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline void SetCPUAffinity (int cpunum) { //////////////////////////////////////////////////////////////////////////////////////
        cpu_set_t set; CPU_ZERO(&set); CPU_SET(cpunum, &set); //////////////////////////////////////////////////////////////////////
        if (sched_setaffinity(getpid(), sizeof(set), &set) == -1) {printf(" Error setting affinity...\n ");} ///////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Some functions to simplify handling vectors: ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> void clone_vector ( const std::vector <T> & src , std::vector <T> & dest ) { /////////////////////////////
        size_t n = src.size() ; ////////////////////////////////////////////////////////////////////////////////////////////////////
        dest.resize(n); ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        (void *) memcpy ( (void *) &(dest[0]), (const void *) &(src[0]), (size_t) n*sizeof(T) ); ///////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> void deduplicate (std::vector <T> & array) { /////////////////////////////////////////////////////////////
        std::vector <T> tmp_array ; ////////////////////////////////////////////////////////////////////////////////////////////////
        size_t SZ = array.size(); //////////////////////////////////////////////////////////////////////////////////////////////////
        if(SZ>1) { /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            std::sort(array.begin(),array.end()); tmp_array.push_back(array[0]); ///////////////////////////////////////////////////
            for(size_t i=1;i<SZ;i++) if(array[i]!=array[i-1]) {tmp_array.push_back(array[i]);} /////////////////////////////////////
            array.resize(tmp_array.size()) ; ///////////////////////////////////////////////////////////////////////////////////////
            memcpy ( (void *) &(array[0]) , (const void *) &(tmp_array[0]) , sizeof(T) * tmp_array.size() ) ; //////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Function to read a file line by line: ///////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void getnames ( std::vector <std::string> & lines , std::string filename ) { ///////////////////////////////////////////////////
        lines.clear(); /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        char *line=NULL; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        size_t len=0; //////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ssize_t read; //////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FILE *stream = fopen (&(filename[0]),"r") ; ////////////////////////////////////////////////////////////////////////////////
        while ((read = getline(&line, &len, stream)) != -1) { //////////////////////////////////////////////////////////////////////
            std::string linename(line); ////////////////////////////////////////////////////////////////////////////////////////////
            linename[linename.size()-1]=0; /////////////////////////////////////////////////////////////////////////////////////////
            lines.push_back(linename); /////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (len>0) {free(line);} ///////////////////////////////////////////////////////////////////////////////////////////////////
        fclose(stream); ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class FileLines { //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::vector <std::string> lines    ; ///////////////////////////////////////////////////////////////////////////////////////
        std::string               filename ; ///////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FileLines  (std::string _filename) : filename(_filename) {getnames(lines,filename);} ///////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~FileLines () {} ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline std::string & operator [] (size_t i) { return lines[i]      ; } /////////////////////////////////////////////////////
        inline size_t        size        ()         { return lines.size () ; } /////////////////////////////////////////////////////
        inline std::string & operator () (size_t i) { return lines[i]      ; } /////////////////////////////////////////////////////
        inline size_t        operator () ()         { return lines.size () ; } /////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void operator () (FILE *f) { for (size_t i=0;i<lines.size();i++) {fprintf(f,"%s\n",&(lines[i][0]));} } //////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void debug_show () { for (size_t i=0;i<lines.size();i++) {printf("%ld => [%s]\n",i,&(lines[i][0]));} } /////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class StringSplit { ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The Main Data Elements: /////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::string               line    ; ////////////////////////////////////////////////////////////////////////////////////////
        std::vector <std::string> words   ; ////////////////////////////////////////////////////////////////////////////////////////
        char                      delimit ; ////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Important functions: ////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        StringSplit  ( std::string _line = "" , char _delimit = ' ' ) : line(_line) , delimit(_delimit) { //////////////////////////
            std::vector <char> buf ; buf.reserve(line.size()) ; ////////////////////////////////////////////////////////////////////
            for (size_t i=0;i<line.size();i++) { ///////////////////////////////////////////////////////////////////////////////////
                if (line[i]==delimit) { ////////////////////////////////////////////////////////////////////////////////////////////
                    buf.push_back((char)0); ////////////////////////////////////////////////////////////////////////////////////////
                    words.push_back(std::string(&(buf[0]))); ///////////////////////////////////////////////////////////////////////
                    buf.resize(0) ; ////////////////////////////////////////////////////////////////////////////////////////////////
                    buf.push_back(line[i]); ////////////////////////////////////////////////////////////////////////////////////////
                    buf.push_back((char)0); ////////////////////////////////////////////////////////////////////////////////////////
                    words.push_back(std::string(&(buf[0]))); ///////////////////////////////////////////////////////////////////////
                    buf.resize(0) ; ////////////////////////////////////////////////////////////////////////////////////////////////
                } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                else { buf.push_back(line[i]); } ///////////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            if (buf.size()>0) { ////////////////////////////////////////////////////////////////////////////////////////////////////
                buf.push_back((char)0); ////////////////////////////////////////////////////////////////////////////////////////////
                words.push_back(std::string(&(buf[0]))); ///////////////////////////////////////////////////////////////////////////
                buf.resize(0) ; ////////////////////////////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~StringSplit () {} /////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Some convinent functions: ///////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline std::string & operator [] (size_t i) {return words[i]     ; } ///////////////////////////////////////////////////////
        inline size_t        size        ()         {return words.size() ; } ///////////////////////////////////////////////////////
        inline std::string & operator () (size_t i) {return words[i]     ; } ///////////////////////////////////////////////////////
        inline size_t        operator () ()         {return words.size() ; } ///////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Print the string: ///////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void show (std::string & in_line) { ////////////////////////////////////////////////////////////////////////////////////////
            std::vector <char> outline ; ///////////////////////////////////////////////////////////////////////////////////////////
            for(size_t i=0;i<words.size();i++) for(size_t j=0;j<words[i].size();j++) if(words[i][j]!=(char)0) {outline.push_back(words[i][j]);}
            outline.push_back((char)0); ////////////////////////////////////////////////////////////////////////////////////////////
            in_line = std::string( &(outline[0]) ); ////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void operator () (std::string & in_line) {show(in_line);} ///////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void debug_show () { for (size_t i=0;i<words.size();i++) {printf("(%ld:%s)",i,&(words[i][0]));} } //////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } ; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // The Main and most important class for simplifying file handeling: ///////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class FileFD { /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        std::string  filename  ;
        int          fd        ;
        struct stat  abtme     ;
        int          filemode  ;
        void        *mapped    ;
        size_t       maplength ;
        int          mmapprot  ;

    public:
        void construct ( std::string Afile = std::string("outfile") ) {
            filename  = Afile      ;
            fd        = -1         ;
            filemode  = -1         ;
            mapped    = MAP_FAILED ;
            mmapprot  = PROT_NONE  ;
            maplength = 0          ;
        }
        int closefile () {
            unmapfile()          ;
            filemode = -1        ;
            mmapprot = PROT_NONE ;
            if (fd<0) {return 0;}
            else {
                int ret = (int) close ( (int) fd ) ;
                fd = -1 ;
                return ret ;
            }
        }
        inline void check_file_mode (int newfilemode = -1) {
            if (filemode!=newfilemode) {closefile();}
            if (fd<0) {
                fd = (int) open ( (const char *) &(filename[0]) , newfilemode , (mode_t) 0755 ) ;
                filemode = newfilemode ;
            }
        }
        inline void readfile   () { check_file_mode ( (int) O_RDONLY                     ) ; mmapprot = ( (int) PROT_READ               ) ; }
        inline void writefile  () { check_file_mode ( (int) O_WRONLY | O_CREAT | O_TRUNC ) ; mmapprot = ( (int) PROT_WRITE              ) ; }
        inline void appendfile () { check_file_mode ( (int) O_RDWR   | O_CREAT           ) ; mmapprot = ( (int) PROT_READ  | PROT_WRITE ) ; }
        inline void destroy    () { closefile       (                                    ) ;                                                }

        FileFD  ( const char *Afile ) { construct ( Afile ) ; }
        FileFD  (                   ) { construct (       ) ; }
        FileFD  ( std::string Afile ) { construct ( Afile ) ; }
        ~FileFD (                   ) { destroy   (       ) ; }

        void reconstruct (std::string Afile = std::string("outfile")) { destroy() ; construct (Afile) ; }
        void reconstruct (char *Afile) { reconstruct (std::string(Afile)) ; }
        inline FileFD & operator () ( std::string name ) { reconstruct(name) ; return (*this); }

        inline int truncatefile ( off_t length = 0 ) { return (int) ftruncate ( (int) fd , (off_t) length ) ; }
        inline off_t seekfile ( off_t offset = 0 , int whence = SEEK_CUR ) { return (off_t) lseek ( (int) fd , (off_t) offset , (int) whence ) ; }
        inline ssize_t read2file ( void *buf = NULL , size_t count = 0 ) { return (ssize_t) read ( (int) fd , ( void *) buf , (size_t) count ) ; }
        inline ssize_t write2file ( const void *buf = NULL , size_t count = 0 ) { return (ssize_t) write ( (int) fd , (const void *) buf , (size_t) count ) ; }
        inline int info () { return (int) fstat ( (int) fd , (struct stat *) &abtme ) ; }
        inline off_t sizefile () { info() ; return (off_t) abtme.st_size ; }
        inline std::string getfilename () { return filename; }
        inline off_t operator () ( off_t offset = 0 ) { return seekfile ( offset ) ; }
        inline FileFD & operator [] ( off_t pos ) { seekfile ( (off_t) pos , SEEK_SET ) ; return (*this) ; }
        inline int getfd () { return fd ; }

        void * mapfile ( size_t length, off_t offset = 0 ) {
            if( (maplength==0) && (mmapprot!=PROT_NONE) && (mapped==MAP_FAILED) ) {
                off_t total_len = length + offset ;
                if (sizefile()<total_len) {truncatefile(total_len);}
                mapped = (void *) mmap ( (void *) NULL , (size_t) length, (int) mmapprot , (int) MAP_SHARED , (int) fd , (off_t) offset );
                if (mapped!=MAP_FAILED) {maplength=length;}
                else {printf("MMAP FAILED 1 !!! %s\n",&(filename[0]));}
            }
            else {printf("MMAP FAILED 2 !!!\n");}
            return mapped;
        }

        int unmapfile () {
            int ret = 0 ;
            if ( (mapped!=MAP_FAILED) && (maplength>0) && (mmapprot!=PROT_NONE) ) {
                ret = (int) munmap ( (void *) mapped , (size_t) maplength ) ;
                maplength = 0 ;
                mapped = MAP_FAILED ;
            }
            return ret;
        }

        inline size_t getmaplength () { return maplength ; }

        template <typename T> inline ssize_t multiread2file  ( T &buf , size_t count = 1 ) { return read2file  ( (      void *) &buf , (size_t) sizeof(T) * count ) ; }
        template <typename T> inline ssize_t multiwrite2file ( const T &buf , size_t count = 1 ) { return write2file ( (const void *) &buf , (size_t) sizeof(T) * count ) ; }

        template <typename T> inline ssize_t WriteVector ( std::vector <T> &out ) {
            size_t count = out.size() ;
            ssize_t writtensize = multiwrite2file (count) ;
            writtensize = writtensize + multiwrite2file (out[0],count) ;
            return writtensize;
        }

        template <typename T> inline ssize_t ReadVector ( std::vector <T> &out ) {
            size_t count = 0 ;
            size_t oldsize = out.size() ;
            ssize_t writtensize = multiread2file (count) ;
            out.resize ( oldsize + count ) ;
            writtensize = multiread2file ( out[oldsize], count ) ;
            return writtensize;
        }

        inline ssize_t WriteString ( std::string &out ) {
            size_t count       = out.size() ;
            ssize_t writtensize = multiwrite2file ( count ) ;
            writtensize = writtensize + multiwrite2file(out[0],count) ;
            return writtensize;
        }

        inline ssize_t operator >> ( char      & out ) { return multiread2file  ( out ) ; }
        inline ssize_t operator << ( char        out ) { return multiwrite2file ( out ) ; }
        inline ssize_t operator >> ( int       & out ) { return multiread2file  ( out ) ; }
        inline ssize_t operator << ( int         out ) { return multiwrite2file ( out ) ; }
        inline ssize_t operator >> ( float     & out ) { return multiread2file  ( out ) ; }
        inline ssize_t operator << ( float       out ) { return multiwrite2file ( out ) ; }
        inline ssize_t operator >> ( double    & out ) { return multiread2file  ( out ) ; }
        inline ssize_t operator << ( double      out ) { return multiwrite2file ( out ) ; }
        inline ssize_t operator >> ( long      & out ) { return multiread2file  ( out ) ; }
        inline ssize_t operator << ( long        out ) { return multiwrite2file ( out ) ; }
        inline ssize_t operator >> ( size_t    & out ) { return multiread2file  ( out ) ; }
        inline ssize_t operator << ( size_t      out ) { return multiwrite2file ( out ) ; }
        inline ssize_t operator << ( std::string out ) { return WriteString     ( out ) ; }

        template <typename T> inline ssize_t operator << ( std::vector <T> &out ) { return WriteVector(out); }
        template <typename T> inline ssize_t operator >> ( std::vector <T> &out ) { return ReadVector (out); }
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Simple function for TRUE random number generation: //////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    double unique () { /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct timespec timeout ; //////////////////////////////////////////////////////////////////////////////////////////////////
        clock_gettime(CLOCK_REALTIME,&timeout); ////////////////////////////////////////////////////////////////////////////////////
        double ret = (double) ( timeout.tv_sec + ( (double) timeout.tv_nsec / 1000000000 ) ) ; /////////////////////////////////////
        FileFD urandom((char *)"/dev/urandom"); ////////////////////////////////////////////////////////////////////////////////////
        urandom.readfile(); ////////////////////////////////////////////////////////////////////////////////////////////////////////
        double rnd ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
        urandom >> rnd ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ret = ret * rnd ; //////////////////////////////////////////////////////////////////////////////////////////////////////////
        return ret;  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> void GetUnique (T & Var) { double ptr = unique() ; Var=*((T*)&ptr); } ////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Class for simplifying memory mapping and array handeling: ///////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> class FileArray { ////////////////////////////////////////////////////////////////////////////////////////
    private:
        T *mainptr  ;
        size_t sizes[4] ;
        std::string filename ;
        FileFD filefd ;
        size_t offset ;
        size_t begin, end, length ;
        size_t act_begin, act_end, act_length ;
    public:
        inline void construct ( std::string Afilename = std::string ("outfile") , size_t Aoffset = 0 ) {
            filename = Afilename ;
            filefd(filename).readfile() ;
            sizes[0] = 4096 ;
            sizes[1] = sizeof (T) ;
            sizes[2] = LCM (sizes[0],sizes[1]) ;
            sizes[3] = sizes[2] / sizes[1] ;
            offset = Aoffset ;
            begin = 0 ; act_begin = 0 ;
            end = 0 ; act_end = 0 ;
            length = 0 ; act_length = 0 ;
        }

        inline void destroy () { filefd.destroy () ; }
        inline void reconstruct ( std::string Afilename = std::string ("outfile") , size_t Aoffset = 0 ) { destroy(); construct(Afilename,Aoffset); }
        inline FileArray & operator () ( std::string Afilename = std::string ("outfile") , size_t Aoffset = 0 ) {
            reconstruct (Afilename,Aoffset) ;
            return (*this) ;
        }

        FileArray ( std::string Afilename = std::string ("outfile") , size_t Aoffset = 0 ) { construct(Afilename,Aoffset); }
        ~FileArray () {destroy();}

        inline void writeable ( bool arg = true ) {
            if(arg) {filefd(filename).appendfile();}
            else {filefd(filename).readfile();}
        }

        void map (size_t t_begin=0, size_t t_length=1) {
            size_t t_end = t_begin + t_length ;
            if ((t_begin<begin)||(t_end>end)) {
                /* Match to sector sizes: */ {
                    begin = myint ((double)t_begin/sizes[3]) ; begin = begin * sizes[3] ;
                    length = myint ((double)t_length/sizes[3]) ; length++ ; length = length * sizes[3] ;
                    end = begin + length ;
                }
                /* Reinitiate map: */ {
                    filefd.unmapfile () ;
                    mainptr = (T*) filefd.mapfile ( (length*sizes[1]) , (begin*sizes[1]) + (offset*sizes[0]) ) ;
                }
            }
        }

        inline T & operator () ( size_t A_begin=0 , size_t A_length=1 ) {
            map (A_begin,A_length) ;
            return mainptr [A_begin-begin] ;
        }

        inline off_t filesize () { return filefd.sizefile () ; }
        inline off_t size () { return filefd.sizefile () / sizes[1] ; }
        inline off_t size ( long num ) { filefd.unmapfile(); filefd.truncatefile(num*sizes[1]); return size(); }
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> class FullFileReader {
    private:
        FileArray <T> MainReader ;
        size_t limit ;
        T * ptr ;
    public:
        inline T const & operator () (size_t i) const { return ptr[i] ; }
        inline T       & operator () (size_t i)       { return ptr[i] ; }
        inline size_t    operator () ()         const { return limit  ; }
        FullFileReader (std::string filename) : MainReader(filename)
        { limit = MainReader.size() ; ptr = & (MainReader(0,limit)) ; }
    } ;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> class FileVector { ///////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FileArray <T> infile ; /////////////////////////////////////////////////////////////////////////////////////////////////////
        size_t count ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FileVector(std::string name): infile(name){ ////////////////////////////////////////////////////////////////////////////////
            infile.writeable(); ////////////////////////////////////////////////////////////////////////////////////////////////////
            count=0; ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            infile.size(count); ////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~FileVector(){infile.size(count);} /////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline size_t size() {return count ;} ////////////////////////////////////////////////////////////////////////////////
        inline void resize(size_t _size) {count=_size;} //////////////////////////////////////////////////////////////////////
        inline void push_back (T indata) { /////////////////////////////////////////////////////////////////////////////////////////
            infile(count) = indata ; ///////////////////////////////////////////////////////////////////////////////////////////////
            count++ ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline T & operator [] (size_t i) {return infile(i);} //////////////////////////////////////////////////////////////////////
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////
    template < typename T > class latexshow { /////////////////////////
        ///////////////////////////////////////////////////////////////
    private:
        ///////////////////////////////////////////////////////////////
        long power; ///////////////////////////////////////////////////
        T num; ////////////////////////////////////////////////////////
        T input; //////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
        inline void reduce () { ///////////////////////////////////////
            ///////////////////////////////////////////////////////////
            while ((-1<num) && (num<1) && (num!=0)) { /////////////////
                num = num * 10.0; /////////////////////////////////////
                power--; //////////////////////////////////////////////
            } /////////////////////////////////////////////////////////
            while ((num > 10) || (-10 > num)) { ///////////////////////
                num = num / 10.0; /////////////////////////////////////
                power++; //////////////////////////////////////////////
            } /////////////////////////////////////////////////////////
        } /////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
        inline char * show (char * b) { ///////////////////////////////
            ///////////////////////////////////////////////////////////
            if ( mymod(power) > limit ) { /////////////////////////////
                sprintf (b, "{$%.3lf \\times 10^{%ld}$}", num, power);
            } else { //////////////////////////////////////////////////
                sprintf (b, "{$%.3lf$}", input); //////////////////////
            } /////////////////////////////////////////////////////////
            return b ; ////////////////////////////////////////////////
        } /////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
    public:
        ///////////////////////////////////////////////////////////////
        size_t limit; /////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
        latexshow (T a) { /////////////////////////////////////////////
            ///////////////////////////////////////////////////////////
            input = a; ////////////////////////////////////////////////
            num = a; //////////////////////////////////////////////////
            power = 0; ////////////////////////////////////////////////
            limit = 2; ////////////////////////////////////////////////
            reduce (); ////////////////////////////////////////////////
        } /////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
        ~latexshow () { ///////////////////////////////////////////////
        } /////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
        inline char * operator  () (char * b) { ///////////////////////
            return show (b); //////////////////////////////////////////
        } /////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////

    }; ////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Class to Easily generate fancy looking tables: //////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> class flowtable { ////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        size_t current ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::vector <T>           L     ; //////////////////////////////////////////////////////////////////////////////////////////
        std::vector <std::string> names ; //////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void safefill ( size_t CLimit ) { //////////////////////////////////////////////////////////////////////////////////////////
            while ( L.size     () <= CLimit    ) { L.push_back     (0)                      ; } /////////////////////////////////////
            while ( names.size () <  L.size () ) { names.push_back (std::string("nothing")) ; } /////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void safefill ()    { safefill (current) ; } ////////////////////////////////////////////////////////////////////////
        inline void namefill ()    { if (L.size()>0) { safefill (L.size()-1) ; } } /////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void copyfrom ( const flowtable <T> & other ) { /////////////////////////////////////////////////////////////////////
            safefill (other.L.size()) ; ////////////////////////////////////////////////////////////////////////////////////////////
            memcpy ( (void*) &(L[0]) , (const void*) &(other.L[0]) , (size_t) sizeof(T) * L.size() ) ; /////////////////////////////
            current = other.current ; //////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void startover () { current = 0 ; } /////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void fill ( T val = 1 , std::string name = "noothing" ) { ///////////////////////////////////////////////////////////
            safefill () ; //////////////////////////////////////////////////////////////////////////////////////////////////////////
            L[current]     = L[current] + val ; ////////////////////////////////////////////////////////////////////////////////////
            names[current] = name             ; ////////////////////////////////////////////////////////////////////////////////////
            current++                         ; ////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void fill ( bool val , std::string name = "nothing" ) { /////////////////////////////////////////////////////////////
            if (val) {fill(1,name);} ///////////////////////////////////////////////////////////////////////////////////////////////
            else     {fill(0,name);} ///////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        char * showhorizontal (std::string & linetitle) { //////////////////////////////////////////////////////////////////////////
            std::vector <std::string> parts ; /**/ { ///////////////////////////////////////////////////////////////////////////////
                std::string tmp = "\\hline " + linetitle + " &" ; //////////////////////////////////////////////////////////////////
                parts.push_back (tmp) ; ////////////////////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            for(size_t i=0;i<L.size();i++){ ////////////////////////////////////////////////////////////////////////////////////////
                latexshow <T> tmplatex (L[i]) ; ////////////////////////////////////////////////////////////////////////////////////
                char tmpbuf [512] ; ////////////////////////////////////////////////////////////////////////////////////////////////
                tmplatex (tmpbuf) ; ////////////////////////////////////////////////////////////////////////////////////////////////
                if (i<L.size()-1) {parts.push_back(std::string(tmpbuf)+" &");} /////////////////////////////////////////////////////
                else {parts.push_back(std::string(tmpbuf)+" \\\\");} ///////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            linetitle = parts[0] ; /////////////////////////////////////////////////////////////////////////////////////////////////
            for(size_t i=1;i<parts.size();i++){ ////////////////////////////////////////////////////////////////////////////////////
                linetitle = linetitle + parts[i] ; /////////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            return &(linetitle[0]) ; ///////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void showvals (std::vector <std::string> & outvals) { //////////////////////////////////////////////////////////////////////
            for(size_t i=0;i<L.size();i++) { ///////////////////////////////////////////////////////////////////////////////////////
                latexshow <double> tmpshow (L[i]) ; ////////////////////////////////////////////////////////////////////////////////
                char tmp[128] ; tmpshow(tmp) ; /////////////////////////////////////////////////////////////////////////////////////
                outvals.push_back(std::string(tmp)); ///////////////////////////////////////////////////////////////////////////////
            } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void operator () () {startover();} //////////////////////////////////////////////////////////////////////////////////
        inline void operator () ( T    val , std::string name = "nothing" , bool inflag = true ) { /////////////////////////////////
            if   (inflag) { fill ( val  , name ) ; } ///////////////////////////////////////////////////////////////////////////////
            else          { fill ( (T)0 , name ) ; } ///////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void operator () ( bool val , std::string name = "nothing" ) {fill(val,name);} //////////////////////////////////////
        inline char * operator () (std::string & linetitle) {return showhorizontal(linetitle);} ////////////////////////////////////
        inline size_t size() {return L.size();} ////////////////////////////////////////////////////////////////////////////////////
        inline T & operator [] (size_t i) {return L[i];} ///////////////////////////////////////////////////////////////////////////
        inline std::vector <std::string> & operator () (std::vector <std::string> & outvals) { /////////////////////////////////////
            showvals(outvals); /////////////////////////////////////////////////////////////////////////////////////////////////////
            return outvals; ////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline size_t operator >> (CPPFileIO::FileFD & outfile) {outfile<<L;} //////////////////////////////////////////////////////
        inline size_t operator << (CPPFileIO::FileFD & outfile) {outfile>>L;} //////////////////////////////////////////////////////
        inline void operator = (const flowtable <T> & other) {copyfrom(other);} ////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void filewrite (std::string filename) { ////////////////////////////////////////////////////////////////////////////////////
            FILE *f = fopen (&(filename[0]),"w") ; /////////////////////////////////////////////////////////////////////////////////
            namefill(); ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            size_t min_v = L.size(); ///////////////////////////////////////////////////////////////////////////////////////////////
            for (size_t i=0;i<min_v;i++) {fprintf(f," L [%ld] = %e \t : \t %s \n",i,(double)L[i],&(names[i][0]));} /////////////////
            fclose(f); /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        flowtable() { //////////////////////////////////////////////////////////////////////////////////////////////////////////////
            L.clear(); /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            current=0; /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        flowtable (const flowtable & other) { //////////////////////////////////////////////////////////////////////////////////////
            copyfrom(other); ///////////////////////////////////////////////////////////////////////////////////////////////////////
            current=0; /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~flowtable(){} /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Printing the Tables: ////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class flowtables { /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        FILE *f ;
    public:
        void operator () (std::string infile) {
            FileLines reader(infile);
            fprintf(f,"{|");
            for (size_t i=0;i<reader.size();i++) {fprintf(f,"c|");}
            fprintf(f,"}\n");
            for (size_t i=0;i<reader();i++) {
                if(i==0) {fprintf(f,"\\hline ");}
                else {fprintf(f,"& ");}
                fprintf(f,"%s",&(reader(i)[0]));
            }
            fprintf(f," \\\\ \n");
        }
        template <typename T> void operator () (flowtable <T> & intable, std::string eventtype) {
            fprintf(f,"%s\n",intable(eventtype));
        }
        flowtables  (FILE * _f) {f=_f;fprintf(f,"\\begin{tabular}");}
        ~flowtables ()          {fprintf(f,"\\hline \\end{tabular}\n");} ///////////////////////////////////////////////////////////
    }; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    class LatexPrintMatrix {
    private:
        std::vector <std::string> elements ;
        size_t X, Y ;
        inline std::string & GetElement ( size_t x , size_t y ) {
            if(x>=X) {printf("BUG!!! out of bounds in x !!!\n");}
            if(y>=Y) {printf("BUG!!! out of bounds in y !!!\n");}
            return elements [x+(X*y)] ;
        }
        void Write2FILE ( FILE * f ) {
            fprintf(f,"\\begin{tabular}");
            for(size_t x=0;x<X;x++) {
                if(x==0){fprintf(f,"{|");}
                fprintf(f,"c|");
                if(x==(X-1)){fprintf(f,"}\n");}
            }
            for (size_t y=0;y<Y;y++) {
                for (size_t x=0;x<X;x++) {
                    if(x==0) {fprintf(f," \\hline %s ",&(GetElement(x,y)[0]));}
                    else     {fprintf(f," & %s ",&(GetElement(x,y)[0]));}
                }
                fprintf(f," \\\\ \n");
            }
            fprintf(f,"\\hline \\end{tabular}\n");
        }
        inline void Write2FILE ( std::string filename ) {
            FILE *f = fopen(&(filename[0]),"w");
            Write2FILE(f);
            fclose(f);
        }
    public:
        inline void operator () (std::vector <std::string> & x, size_t y) {
            size_t limit = mymin (x.size(),X) ;
            for(size_t i=0;i<limit;i++) {GetElement(i,y)=x[i];}
        }
        inline void operator () (size_t x, std::vector <std::string> & y) {
            size_t limit = mymin (y.size(),Y) ;
            for(size_t i=0;i<limit;i++) {GetElement(x,i)=y[i];}
        }
        inline void operator () (FileLines & x, size_t y) {
            size_t limit = mymin(x(),X);
            for(size_t i=0;i<limit;i++) {GetElement(i,y)=x(i);}
        }
        inline void operator () (size_t x, FileLines & y) {
            size_t limit = mymin(y(),Y);
            for(size_t i=0;i<limit;i++) {GetElement(x,i)=y(i);}
        }
        inline void operator () (FILE *f)              {Write2FILE(f);}
        inline void operator () (std::string filename) {Write2FILE(filename);}
        LatexPrintMatrix (size_t _X, size_t _Y) {
            X=_X;Y=_Y;
            elements.resize(X*Y);
        }
        ~LatexPrintMatrix(){}
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Convinent multi threadable class for uniform double random number generation: ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T> class myrandgen { ////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::vector <T*> engines ; /////////////////////////////////////////////////////////////////////////////////////////////////
        std::uniform_real_distribution <double> dist ; /////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline void allocate () { //////////////////////////////////////////////////////////////////////////////////////////////////
            std::random_device random_seeds ; //////////////////////////////////////////////////////////////////////////////////////
            for(size_t i=0;i<engines.size();i++) {engines[i]=new T(random_seeds());} ///////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        double low, high ; /////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        myrandgen(size_t threads, double _low=0, double _high=1) : low(_low) , high(_high) , dist(_low,_high) { ////////////////////
            engines.resize(threads) ; //////////////////////////////////////////////////////////////////////////////////////////////
            allocate() ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~myrandgen(){ //////////////////////////////////////////////////////////////////////////////////////////////////////////////
            for(size_t i=0;i<engines.size();i++) {delete engines[i];} //////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        inline double operator [] (size_t th) { ////////////////////////////////////////////////////////////////////////////////////
            double ret = dist(engines[th][0]) ; ////////////////////////////////////////////////////////////////////////////////////
            return ret ; ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    } ; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class ToDir {
    private:
        std::string originaldir ;
        inline void godir (std::string dirname) {
            mkdir((const char*)&(dirname[0]),(mode_t)0755);
            chdir((const char*)&(dirname[0]));
        }
        bool goback ;
    public:
        inline void operator () (std::string dirname) {godir(dirname);}
        inline void operator () (const char *dirname) {godir(std::string(dirname));}
        inline void operator () (long innum) {
            char tmp[128] ;
            sprintf(tmp,"%ld",innum);
            godir(std::string(tmp));
        }
        inline void operator () () {godir(originaldir);}
        inline void showdir() {
            char tmp[1024] ;
            getcwd((char*)tmp,(size_t)1024);
            printf("%s\n",tmp);
        }
        inline std::string getoriginal () {return originaldir;}
        ToDir(bool _goback=false){
            goback = _goback ;
            char tmp[1024] ;
            getcwd((char*)tmp,(size_t)1024);
            originaldir = std::string(tmp);
            std::cout << originaldir << "\n" ;
        }
        ~ToDir(){if(goback){godir(originaldir);}}
    };

    template <typename T>
    class MemContainer {
    public:
        //
        T * const PTR ;
        T &       REF ;
        //
        MemContainer ( T * const _PTR ) :
        PTR(_PTR) , REF(PTR[0]) {}
        //
        ~MemContainer () { delete PTR ; }
        //
        inline T & operator () (size_t i)
            { return PTR [i] ; }
        //
    } ;

    template <typename T> inline
    MemContainer <T> GET_MemContainer
    ( T * a ) {
        MemContainer <T> ret (a) ;
        return ret ;
    }


} //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef USECBLAS
#include "cblas.h"
#endif

#ifdef USEPCG
#include "pcg.hh"
#endif

namespace Tensors {
    class Nothing {
    public:
        Nothing(){}
        ~Nothing(){}
    } ;
    ////////////////////////////////////////////////////////////////
    namespace NN /* 1 D Array */ {
        template <size_t X, typename T=float>
        class ND_ARRAY {
        public:
            typedef T TYPE_DATA ;
            //
            inline static constexpr size_t
                SIZE() {return X;}
            //
            typedef ND_ARRAY <SIZE(),TYPE_DATA>
                TYPE_SELF ;
            //
        private:
            TYPE_DATA DATA[SIZE()] ;
        private:
            ////////////////////////////////////////////////////////////////
            inline void Add ( const TYPE_SELF & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] += other.DATA[x] ; }
            }
            //
            inline void Sub ( const TYPE_SELF & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] -= other.DATA[x] ; }
            }
            //
            inline void Mul ( const TYPE_SELF & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] *= other.DATA[x] ; }
            }
            //
            inline void Div ( const TYPE_SELF & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] /= other.DATA[x] ; }
            }
            ////////////////////////////////////////////////////////////////
            inline void Add ( const TYPE_DATA & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] += other ; }
            }
            //
            inline void Sub ( const TYPE_DATA & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] -= other ; }
            }
            //
            inline void Mul ( const TYPE_DATA & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] *= other ; }
            }
            //
            inline void Div ( const TYPE_DATA & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] /= other ; }
            }
            //
            inline void Eqt ( const TYPE_DATA & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] = other ; }
            }
            ////////////////////////////////////////////////////////////////
            inline TYPE_DATA Dot
            ( const TYPE_SELF & other ) const {
                double ret = 0 ;
                for ( size_t i = 0 ; i < SIZE() ; i++ )
                { ret += DATA[i] * other.DATA[i] ; }
                return ret ;
            }
            ////////////////////////////////////////////////////////////////
            inline void * CopyFrom
            ( const void * __restrict__ other ) {
                return (void *) memcpy (
                    (       void * ) /* dest = */ DATA  ,
                    ( const void * ) /* src  = */ other ,
                    (     size_t   ) /* n    = */ sizeof (TYPE_SELF)
                ) ;
            }
            //
            inline void * CopyFrom
            ( const TYPE_DATA * __restrict__ other ) {
                return CopyFrom (
                    ( const void * )
                        /* other = */ other
                ) ;
            }
            //
            inline void * CopyFrom
            ( const TYPE_SELF other ) {
                return CopyFrom (
                    ( const TYPE_DATA * )
                        /* other = */ other.DATA
                ) ;
            }
            ////////////////////////////////////////////////////////////////
        public:
            ////////////////////////////////////////////////////////////////
            inline void operator +=
            ( const TYPE_SELF & other )
            { Add (other) ; }
            //
            inline void operator -=
            ( const TYPE_SELF & other )
            { Sub (other) ; }
            //
            inline void operator *=
            ( const TYPE_SELF & other )
            { Mul (other) ; }
            //
            inline void operator /=
            ( const TYPE_SELF & other )
            { Div (other) ; }
            //
            ////////////////////////////////////////////////////////////////
            inline void operator +=
            ( const TYPE_DATA & other )
            { Add (other) ; }
            //
            inline void operator -=
            ( const TYPE_DATA & other )
            { Sub (other) ; }
            //
            inline void operator *=
            ( const TYPE_DATA & other )
            { Mul (other) ; }
            //
            inline void operator /=
            ( const TYPE_DATA & other )
            { Div (other) ; }
            //
            inline void operator  =
            ( const TYPE_DATA & other )
            { Eqt (other) ; }
            ////////////////////////////////////////////////////////////////
            //
            inline TYPE_SELF & FLATTEN ()
            { return this[0] ; }
            //
            inline TYPE_SELF const &
            FLATTEN () const
            { return this[0] ; }
            //
            inline void GET_SQUARED
            ( const TYPE_SELF & other ) {
                for ( size_t x = 0 ; x < SIZE() ; x++ )
                { DATA[x] = other.DATA[x] * other.DATA[x] ; }
            }
            //
            inline TYPE_DATA operator *
            ( const TYPE_SELF & other ) const
            { return Dot (other) ; }
            //
            inline TYPE_DATA &
            operator [] (size_t x)
            { return DATA[x] ; }
            //
            inline TYPE_DATA const
            operator [] (size_t x) const
            { return DATA[x] ; }
            //
            inline TYPE_DATA *
            GET_DATA () {
                return reinterpret_cast
                    < TYPE_DATA * > ( DATA ) ;
            }
            //
            inline TYPE_DATA const *
            GET_DATA () const {
                return reinterpret_cast
                    < TYPE_DATA const * > ( DATA ) ;
            }
            //
            inline TYPE_DATA L1_NORM () const {
                TYPE_DATA Ret = 0 ;
                for ( size_t i = 0 ; i < SIZE () ; i++ )
                { Ret += CPPFileIO::mymod (DATA[i]) ; }
                return Ret ;
            }
            //
            inline TYPE_DATA L2_NORM () const {
                TYPE_DATA Ret = 0 ;
                for ( size_t i = 0 ; i < SIZE () ; i++ )
                { Ret += ( DATA[i] * DATA[i] ) ; }
                return Ret ;
            }
            //
        } ;
    }
    namespace NN /* 2 D Array */ {
        template <size_t Y, size_t X, typename T=float>
        class N2D_ARRAY :
        public ND_ARRAY <Y,ND_ARRAY<X,T>> {
        public:
            //
            typedef T TYPE_DATA   ;
            inline static constexpr
                size_t SIZE_X ()
                { return X;}
            //
            inline static constexpr
                size_t SIZE_Y ()
                { return Y;}
            //
            inline static constexpr
                size_t SIZE ()
                { return SIZE_X() * SIZE_Y() ; }
            //
            typedef ND_ARRAY <SIZE(),TYPE_DATA>
                TYPE_FLATTEN ;
            //
            inline TYPE_FLATTEN const & FLATTEN () const {
                return reinterpret_cast
                    < TYPE_FLATTEN const & >
                    ( this[0] ) ;
            }
            //
            inline TYPE_FLATTEN & FLATTEN () {
                return reinterpret_cast
                    < TYPE_FLATTEN & >
                    ( this[0] ) ;
            }
            //
            typedef N2D_ARRAY <
                SIZE_Y() ,
                SIZE_X() ,
                TYPE_DATA
            > TYPE_SELF ;
            //
            typedef ND_ARRAY <
                SIZE_Y() ,
                ND_ARRAY < SIZE_X() , TYPE_DATA >
            > TYPE_PARENT ;
            //
            inline void GET_SQUARED
            ( TYPE_SELF const & other ) {
                FLATTEN().GET_SQUARED
                    (other.FLATTEN()) ;
                //
            }
            //
            inline void operator =
            (TYPE_DATA const & a)
            { FLATTEN() = a ; }
            //
            inline void operator +=
            (TYPE_DATA const & a)
            { FLATTEN() += a ; }
            //
            inline void operator -=
            (TYPE_DATA const & a)
            { FLATTEN() -= a ; }
            //
            inline void operator *=
            (TYPE_DATA const & a)
            { FLATTEN() *= a ; }
            //
            inline void operator /=
            (TYPE_DATA const & a)
            { FLATTEN() /= a ; }
            //
            inline TYPE_DATA const
            L1_NORM () const
            { return FLATTEN().L1_NORM() ; }
            //
            inline TYPE_DATA const
            L2_NORM () const
            { return FLATTEN().L2_NORM() ; }
            //
            inline TYPE_DATA *
            GET_DATA ()
            { return FLATTEN().GET_DATA(); }
            //
            inline TYPE_DATA const *
            GET_DATA () const
            { return FLATTEN().GET_DATA(); }
            //
        } ;
    }
    namespace NN /* 3 D Array */ {
        template <
            size_t Z,
            size_t Y,
            size_t X,
            typename T=float
        > class N3D_ARRAY : public
        ND_ARRAY <Z,N2D_ARRAY<Y,X,T>> {
        public:
            //
            typedef T TYPE_DATA   ;
            inline static constexpr
                size_t SIZE_X ()
                { return X;}
            //
            inline static constexpr
                size_t SIZE_Y ()
                { return Y;}
            //
            inline static constexpr
                size_t SIZE_Z ()
                { return Z;}
            //
            inline static constexpr
            size_t SIZE () {
                return
                    SIZE_X() *
                    SIZE_Y() *
                    SIZE_Z() ;
                //
            }
            //
            typedef ND_ARRAY <
                SIZE(),
                TYPE_DATA
            > TYPE_FLATTEN ;
            //
            inline TYPE_FLATTEN const &
            FLATTEN () const {
                return reinterpret_cast
                    < TYPE_FLATTEN const & >
                    ( this[0] ) ;
            }
            //
            inline TYPE_FLATTEN &
            FLATTEN () {
                return reinterpret_cast
                    < TYPE_FLATTEN & >
                    ( this[0] ) ;
            }
            //
            typedef N3D_ARRAY <
                SIZE_Z()  ,
                SIZE_Y()  ,
                SIZE_X()  ,
                TYPE_DATA
            > TYPE_SELF   ;
            //
            typedef ND_ARRAY <
                SIZE_Z(),
                N2D_ARRAY <
                    SIZE_Y(),
                    SIZE_X(),
                    TYPE_DATA
                >
            > TYPE_PARENT ;
            //
            inline void GET_SQUARED
            ( TYPE_SELF const & other ) {
                FLATTEN().GET_SQUARED
                    (other.FLATTEN()) ;
                //
            }
            //
            inline void operator =
            (TYPE_DATA const & a)
            { FLATTEN() = a ; }
            //
            inline void operator +=
            (TYPE_DATA const & a)
            { FLATTEN() += a ; }
            //
            inline void operator -=
            (TYPE_DATA const & a)
            { FLATTEN() -= a ; }
            //
            inline void operator *=
            (TYPE_DATA const & a)
            { FLATTEN() *= a ; }
            //
            inline void operator /=
            (TYPE_DATA const & a)
            { FLATTEN() /= a ; }
            //
            inline TYPE_DATA const
            L1_NORM () const {
                return
                    FLATTEN()
                    .L1_NORM() ;
                //
            }
            //
            inline TYPE_DATA const
            L2_NORM () const {
                return
                    FLATTEN()
                    .L2_NORM() ;
                //
            }
            //
            inline TYPE_DATA *
            GET_DATA () {
                return
                    FLATTEN()
                    .GET_DATA();
                //
            }
            //
            inline TYPE_DATA const *
            GET_DATA () const {
                return
                    FLATTEN()
                    .GET_DATA();
                //
            }
            //
        } ;
    }
    ////////////////////////////////////////////////////////////////
    namespace FUNCTIONS /* The neural network multiplication function: */ {
        using namespace NN ;
        // Function to evaluate neural network activation:
        template <
            size_t B , size_t   Y ,
            size_t X , typename T
        > inline void NeuralMultiply (
            N2D_ARRAY < B , Y , T >       & Output ,
            N2D_ARRAY < Y , X , T > const & Weight ,
            N2D_ARRAY < B , X , T > const & Input ,
            ND_ARRAY  < Y ,     T > const & Bias
        ) {
            for(size_t b=0;b<B;b++)
            { Output[b] = Bias ; }
            //
            for(size_t y=0;y<Y;y++){
                for(size_t b=0;b<B;b++){
                    for(size_t x=0;x<X;x++){
                        Output[b][y] +=
                            Weight[y][x] * Input[b][x] ;
                    }
                }
            }
            //
        }
        #ifdef CBLAS_H
        template <
            size_t B ,
            size_t Y ,
            size_t X
        > inline void
        NeuralMultiply (
            N2D_ARRAY < B , Y , double >       & Output ,
            N2D_ARRAY < Y , X , double > const & Weight ,
            N2D_ARRAY < B , X , double > const & Input  ,
            ND_ARRAY  < Y ,     double > const & Bias
        ) {
            for(size_t b=0;b<B;b++)
            { Output[b] = Bias ; }
            //
            cblas_dgemm (
                CblasRowMajor, CblasNoTrans, CblasTrans,
                (const int) /*M=*/B, (const int) /*N=*/Y, (const int) /*K=*/X,
                (const double) /*alpha=*/1.0,
                (const double *) Input.GET_DATA(), (const int) /*ldb=*/X,
                (const double *) Weight.GET_DATA(), (const int) /*lda=*/X,
                (const double) /*beta=*/1.0,
                (double *) Output.GET_DATA(), (const int) /*ldc=*/Y
            ) ;
            //
        }
        template <
            size_t B ,
            size_t Y ,
            size_t X
        > inline void
        NeuralMultiply (
            N2D_ARRAY < B , Y , float >       & Output ,
            N2D_ARRAY < Y , X , float > const & Weight ,
            N2D_ARRAY < B , X , float > const & Input  ,
            ND_ARRAY  < Y ,     float > const & Bias
        ) {
            for(size_t b=0;b<B;b++)
            { Output[b] = Bias ; }
            //
            cblas_sgemm (
                CblasRowMajor, CblasNoTrans, CblasTrans,
                (const int) /*M=*/B, (const int) /*N=*/Y, (const int) /*K=*/X,
                (const float) /*alpha=*/1.0,
                (const float *) Input.GET_DATA(), (const int) /*ldb=*/X,
                (const float *) Weight.GET_DATA(), (const int) /*lda=*/X,
                (const float) /*beta=*/1.0,
                (float *) Output.GET_DATA(), (const int) /*ldc=*/Y
            ) ;
            //
        }
        #endif
    }
    namespace FUNCTIONS /* Defining EvalW for Backpropagation: */ {
        // Functions for evaluating changes in weight:
        template <
            size_t Y , size_t   X ,
            size_t B , typename T
        > inline void EvalW (
            N2D_ARRAY <Y,X,T>       & DW    ,
            N2D_ARRAY <B,Y,T> const & Delta ,
            N2D_ARRAY <B,X,T> const & Input
        ) {
            for(size_t b=0;b<B;b++){
                for(size_t y=0;y<Y;y++){
                    for(size_t x=0;x<X;x++) {
                        DW[y][x] +=
                            Delta[b][y] * Input[b][x] ;
                    }
                }
            }
        }
        #ifdef CBLAS_H
        template <
            size_t Y ,
            size_t X ,
            size_t B
        > inline void EvalW (
            N2D_ARRAY < Y , X , float >       & DW    ,
            N2D_ARRAY < B , Y , float > const & Delta ,
            N2D_ARRAY < B , X , float > const & Input
        ) {
            cblas_sgemm (
                CblasRowMajor, CblasTrans, CblasNoTrans,
                (const int) /*M=*/Y, (const int) /*N=*/X, (const int) /*K=*/B,
                (const float) /*alpha=*/1.0,
                (const float *) Delta.GET_DATA(), (const int) /*lda=*/Y,
                (const float *) Input.GET_DATA(), (const int) /*ldb=*/X,
                (const float) /*beta=*/1.0,
                (float *) DW.GET_DATA(), (const int) /*ldc=*/X
            ) ;
        }
        template <
            size_t Y ,
            size_t X ,
            size_t B
        > inline void EvalW (
            N2D_ARRAY < Y , X , double >       & DW    ,
            N2D_ARRAY < B , Y , double > const & Delta ,
            N2D_ARRAY < B , X , double > const & Input
        ) {
            cblas_dgemm (
                CblasRowMajor, CblasTrans, CblasNoTrans,
                (const int) /*M=*/Y, (const int) /*N=*/X, (const int) /*K=*/B,
                (const double) /*alpha=*/1.0,
                (const double *) Delta.GET_DATA(), (const int) /*lda=*/Y,
                (const double *) Input.GET_DATA(), (const int) /*ldb=*/X,
                (const double) /*beta=*/1.0,
                (double *) DW.GET_DATA(), (const int) /*ldc=*/X
            ) ;
        }
        #endif
    }
    namespace FUNCTIONS /* Defining the DELTA_PRIME evaluation: */ {
        // function to evaluate DELTA_PRIME of the back propagation chain:
        template <
            size_t   B , size_t   X ,
            size_t   Y , typename T
        > inline void BackProp (
            N2D_ARRAY <B,X,T>       & DeltaPrime ,
            N2D_ARRAY <B,Y,T> const & Delta      ,
            N2D_ARRAY <Y,X,T> const & Weight
        ) {
            DeltaPrime = 0 ;
            for(size_t b=0;b<B;b++){
                for(size_t y=0;y<Y;y++){
                    for(size_t x=0;x<X;x++){
                        DeltaPrime[b][x] +=
                            Delta[b][y] * Weight[y][x] ;
                    }
                }
            }
        }
        #ifdef CBLAS_H
        template <
            size_t B ,
            size_t X ,
            size_t Y
        > inline void BackProp (
            N2D_ARRAY < B , X , float >       & DeltaPrime ,
            N2D_ARRAY < B , Y , float > const & Delta      ,
            N2D_ARRAY < Y , X , float > const & Weight
        ) {
            cblas_sgemm (
                CblasRowMajor, CblasNoTrans, CblasNoTrans,
                (const int) /*M=*/B, (const int) /*N=*/X, (const int) /*K=*/Y,
                (const float) /*alpha=*/1.0,
                (const float *) Delta.GET_DATA(), (const int) /*lda=*/Y,
                (const float *) Weight.GET_DATA(), (const int) /*ldb=*/X,
                (const float) /*beta=*/0,
                (float *) DeltaPrime.GET_DATA(), (const int) /*ldc=*/X
            );
        }
        template <
            size_t B ,
            size_t X ,
            size_t Y
        > inline void BackProp (
            N2D_ARRAY < B , X , double >       & DeltaPrime ,
            N2D_ARRAY < B , Y , double > const & Delta      ,
            N2D_ARRAY < Y , X , double > const & Weight
        ) {
            cblas_dgemm (
                CblasRowMajor, CblasNoTrans, CblasNoTrans,
                (const int) /*M=*/B, (const int) /*N=*/X , (const int) /*K=*/Y,
                (const double) /*alpha=*/1.0 ,
                (const double *) Delta.GET_DATA () , (const int) /*lda=*/Y,
                (const double *) Weight.GET_DATA () , (const int) /*ldb=*/X,
                (const double) /*beta=*/0,
                (double *) DeltaPrime.GET_DATA () , (const int) /*ldc=*/X
            );
        }
        #endif
    }
    namespace FUNCTIONS /* The Gradient Propagator: */ {
        template <
            size_t   B , size_t   M ,
            size_t   Y , size_t   X ,
            typename T
        > inline void
        GRAD_PROPAGATE (
            N3D_ARRAY < B , Y , M , T >       & OK ,
            N2D_ARRAY < Y , X ,     T > const & WK ,
            N3D_ARRAY < B , X , M , T > const & IK
        ) {
            OK=0.0;
            for(size_t b=0;b<B;b++){
                for(size_t y=0;y<Y;y++){
                    for(size_t x=0;x<X;x++){
                        for(size_t m=0;m<M;m++){
                            OK[b][y][m] +=
                                WK[y][x]    *
                                IK[b][x][m] ;
                            //
                        }
                    }
                }
            }
        }
        //
        #ifdef CBLAS_H
        template <
            size_t   B , size_t   M ,
            size_t   Y , size_t   X
        > inline void
        GRAD_PROPAGATE (
            N3D_ARRAY < B , Y , M , float >       & OK ,
            N2D_ARRAY < Y , X ,     float > const & WK ,
            N3D_ARRAY < B , X , M , float > const & IK
        ) {
            for(size_t b=0;b<B;b++){
                cblas_sgemm (
                    CblasRowMajor, CblasNoTrans, CblasNoTrans,
                    (const int) /*M=*/Y, (const int) /*N=*/M, (const int) /*K=*/X,
                    (const float) /*alpha=*/1.0,
                    (const float *) WK.GET_DATA(), (const int) /*lda=*/X,
                    (const float *) IK[b].GET_DATA(), (const int) /*ldb=*/M,
                    (const float) /*beta=*/0,
                    (float *) OK[b].GET_DATA(), (const int) /*ldc=*/M
                ) ;
            }
        }
        template <
            size_t   B , size_t   M ,
            size_t   Y , size_t   X
        > inline void
        GRAD_PROPAGATE (
            N3D_ARRAY < B , Y , M , double >       & OK ,
            N2D_ARRAY < Y , X ,     double > const & WK ,
            N3D_ARRAY < B , X , M , double > const & IK
        ) {
            for(size_t b=0;b<B;b++){
                cblas_dgemm (
                    CblasRowMajor, CblasNoTrans, CblasNoTrans,
                    (const int) /*M=*/Y, (const int) /*N=*/M, (const int) /*K=*/X,
                    (const double) /*alpha=*/1.0,
                    (const double *) WK.GET_DATA(), (const int) /*lda=*/X,
                    (const double *) IK[b].GET_DATA(), (const int) /*ldb=*/M,
                    (const double) /*beta=*/0,
                    (double *) OK[b].GET_DATA(), (const int) /*ldc=*/M
                ) ;
            }
        }
        #endif
        //
        template <
            size_t   B , size_t   M ,
            size_t   Y , size_t   X ,
            typename T
        > inline void
        GRAD_PROPAGATE (
            N3D_ARRAY < B , Y , M , T >       & OK ,
            N2D_ARRAY < Y , X ,     T > const & WK ,
            bool                        const   IK
        ) {
            for(size_t b=0;b<B;b++){
                OK[b] = WK ;
                //
            }
        }
    }
    ////////////////////////////////////////////////////////////////
    namespace FUNCTIONS /* Show Functions */ {
        template <size_t Y, typename T>
        inline void ShowMatrix
        ( ND_ARRAY <Y,T> const & in ) {
            for (size_t y=0;y<Y;y++) {
                printf("%e ",in[y]);
            }
            printf("\n");
        }
        template <size_t Y, size_t X, typename T>
        inline void ShowMatrix
        ( N2D_ARRAY <Y,X,T> const & in ) {
            for (size_t y=0;y<Y;y++) {
                for (size_t x=0;x<X;x++) {
                    printf("%e ",in[y][x]);
                }
                printf("\n");
            }
        }
    }
    ////////////////////////////////////////////////////////////////
    namespace FUNCTIONS /* Show Functions */ {
        template <size_t Y, typename T>
        inline void ShowMatrix
        ( ND_ARRAY <Y,std::complex<T>> const & in ) {
            for (size_t y=0;y<Y;y++) {
                printf("(%e,%e) ",in[y].real(),in[y].imag());
            }
            printf("\n");
        }
        template <size_t Y, size_t X, typename T>
        inline void ShowMatrix
        ( N2D_ARRAY <Y,X,std::complex<T>> const & in ) {
            for (size_t y=0;y<Y;y++) {
                for (size_t x=0;x<X;x++) {
                    printf("(%e,%e) ",in[y][x].real(),in[y][x].imag());
                }
                printf("\n");
            }
        }
    }
    ////////////////////////////////////////////////////////////////
    namespace NN /* PARAMETER */ {
        template <size_t Y, size_t X, typename T>
        class PARAMETER {
        public:
            //
            typedef T TYPE_DATA   ;
            //
            inline static constexpr size_t
            SIZE_X ()
            { return X ; }
            //
            inline static constexpr size_t
            SIZE_Y ()
            { return Y ; }
            //
            inline static size_t constexpr
            SIZE ()
            { return SIZE_X() * SIZE_Y() ; }
            //
            typedef PARAMETER
            < SIZE_Y() , SIZE_X() , TYPE_DATA >
            TYPE_SELF ;
            //
            typedef N2D_ARRAY
            < SIZE_Y() , SIZE_X() , TYPE_DATA >
            TYPE_WEIGHT ;
            //
            typedef ND_ARRAY
            < SIZE_Y() , TYPE_DATA >
            TYPE_BIAS ;
            //
            inline TYPE_DATA &
                operator ()
                ( size_t y , size_t x )
                { return WEIGHT[y][x] ; }
            //
            inline TYPE_DATA const
                operator ()
                ( size_t y , size_t x ) const
                { return WEIGHT[y][x] ; }
            //
            inline TYPE_DATA &
                operator () (size_t y)
                { return BIAS[y] ; }
            //
            inline TYPE_DATA const
                operator () (size_t y) const
                { return BIAS[y] ; }
            //
            inline void RANDOMIZE () {
                //
                constexpr TYPE_DATA Var =
                    2.0 /
                    ((TYPE_DATA)SIZE_X()+SIZE_Y()) ;
                //
                std::normal_distribution
                    <double> dist (0.0,Var) ;
                //
                #ifdef PCG_RAND_HPP_INCLUDED
                    pcg64_fast engine ;
                #else
                    std::mt19937 engine ;
                #endif
                //
                for ( size_t y = 0 ; y < Y ; y++ ) {
                    for ( size_t x = 0 ; x < X ; x++ )
                    { WEIGHT[y][x] = dist(engine) ; }
                }
                for ( size_t y = 0 ; y < Y ; y++ )
                { BIAS[y] = dist(engine) ; }
                //
            }
            //
            inline void RELEASE_LOCK ()
            { pthread_mutex_unlock (&lock) ; }
            //
            inline void ACQUIRE_LOCK ()
            { pthread_mutex_lock (&lock) ; }
            //
            inline void operator =
                (TYPE_DATA const & a)
                { WEIGHT = a ; BIAS = a ; }
            //
            inline void operator /=
                (TYPE_DATA const & a)
                { WEIGHT /= a ; BIAS /= a ; }
            //
            inline void operator *=
                (TYPE_DATA const & a)
                { WEIGHT *= a ; BIAS *= a ; }
            //
            inline void operator +=
                (TYPE_DATA const & a)
                { WEIGHT += a ; BIAS += a ; }
            //
            inline void operator -=
                (TYPE_DATA const & a)
                { WEIGHT -= a ; BIAS -= a ; }
            //
            inline void operator =
            (TYPE_SELF const & other) {
                WEIGHT = other.WEIGHT ;
                BIAS = other.BIAS ;
            }
            //
        private:
            //
            inline ssize_t WriteToFile
            (CPPFileIO::FileFD & file) const {
                ssize_t ret = 0 ;
                ret += file.multiwrite2file
                    ( WEIGHT ) ;
                //
                ret += file.multiwrite2file
                    ( BIAS ) ;
                //
                return ret;
            }
            //
            inline ssize_t WriteToFile
            (std::string filename) const {
                CPPFileIO::FileFD Writer
                    (filename) ;
                //
                Writer.writefile();
                return WriteToFile(Writer);
            }
            //
            inline ssize_t ReadFromFile
            (CPPFileIO::FileFD & file) {
                ssize_t ret = 0 ;
                ret += file.multiread2file
                    ( WEIGHT ) ;
                //
                ret += file.multiread2file
                    (   BIAS ) ;
                //
                return ret;
            }
            //
            inline ssize_t ReadFromFile
            (std::string filename) {
                CPPFileIO::FileFD Reader
                    (filename) ;
                //
                Reader.readfile();
                return ReadFromFile(Reader);
            }
            //
        public:
            //
            inline ssize_t operator >>
            ( CPPFileIO::FileFD & file ) const
            { return WriteToFile  (file) ; }
            //
            inline ssize_t operator <<
            ( CPPFileIO::FileFD & file )
            { return ReadFromFile (file) ; }
            //
            inline ssize_t operator >>
            ( std::string filename ) const
            { return WriteToFile (filename) ; }
            //
            inline ssize_t operator <<
            ( std::string filename )
            { return ReadFromFile (filename) ; }
            //
            TYPE_WEIGHT     WEIGHT ;
            TYPE_BIAS       BIAS   ;
            //
        private:
            pthread_mutex_t lock   ;
        } ;
    }
    namespace NN /* PARAMETER_ADAM */ {
        template <typename T>
        class PARAMETER_ADAM : public T {
        public:
            //
            typedef T TYPE_PARENT ;
            //
            PARAMETER_ADAM  () {
                Beta[0] = GET_BETA1 () ;
                Beta[1] = GET_BETA2 () ;
                M=0;V=0;
            }
            //
            typedef PARAMETER_ADAM
                <TYPE_PARENT> TYPE_SELF ;
            //
        private:
            //
            typedef typename TYPE_PARENT::TYPE_DATA
                TMP_TYPE_DATA ;
            //
        public:
            //
            inline static constexpr
            TMP_TYPE_DATA GET_BETA1 ()
            { return 0.90 ; }
            //
            inline static constexpr
            TMP_TYPE_DATA GET_BETA2 ()
            { return 0.99 ; }
            //
            inline static constexpr
            TMP_TYPE_DATA Eps ()
            { return 0.001 ; }
            //
        private:
            //
            template <typename InType>
            inline void AddParameter (
                InType              & DST ,
                InType        const & SRC ,
                TMP_TYPE_DATA const   beta
            ) {
                auto const & TMP_SRC = SRC.FLATTEN() ;
                auto       & TMP_DST = DST.FLATTEN() ;
                constexpr size_t limit = InType::SIZE();
                for(size_t i=0;i<limit;i++) {
                    TMP_DST[i] =
                        (beta*TMP_DST[i]) +
                        ((1.0-beta)*TMP_SRC[i]) ;
                }
            }
            //
            inline void AddBoth (
                TYPE_PARENT         & DST  ,
                TYPE_PARENT   const & SRC  ,
                TMP_TYPE_DATA const   beta
            ) {
                AddParameter (
                    DST.WEIGHT ,
                    SRC.WEIGHT ,
                    beta
                ) ;
                AddParameter (
                    DST.BIAS ,
                    SRC.BIAS ,
                    beta
                ) ;
            }
            //
            template <typename InType>
            inline void Apply (
                InType              & DST  ,
                InType        const & SRCM ,
                InType        const & SRCV ,
                TMP_TYPE_DATA const   Eta
            ) {
                constexpr size_t limit = InType::SIZE();
                auto       &  dst = DST.FLATTEN  () ;
                auto const & srcm = SRCM.FLATTEN () ;
                auto const & srcv = SRCV.FLATTEN () ;
                //
                for (size_t i=0;i<limit;i++) {
                    dst[i] = dst[i] - (
                        Eta * srcm[i] /
                        ( Eps() + sqrt(srcv[i]) )
                    ) ;
                }
                //
            }
            //
            inline void ApplyBoth (
                TYPE_PARENT         & DST  ,
                TYPE_PARENT   const & SRCM ,
                TYPE_PARENT   const & SRCV ,
                TMP_TYPE_DATA const   Eta
            ) {
                Apply (
                    DST.WEIGHT , SRCM.WEIGHT ,
                    SRCV.WEIGHT , Eta
                ) ;
                Apply (
                    DST.BIAS , SRCM.BIAS ,
                    SRCV.BIAS , Eta
                ) ;
            }

        public:
            inline void UPDATE (
                TYPE_PARENT   const & _M  ,
                TYPE_PARENT   const & _V  ,
                TMP_TYPE_DATA const   Eta
            ) {
                this->ACQUIRE_LOCK();
                AddBoth(M,_M,Beta[0]);
                AddBoth(V,_V,Beta[1]);
                ApplyBoth(this[0],M,V,Eta);
                this->RELEASE_LOCK();
            }
        private:
            TMP_TYPE_DATA Beta[2];
            TYPE_PARENT M, V;
        };
    }
    ////////////////////////////////////////////////////////////////
    namespace NN /* FirstLayer */ {
        template <typename T>
        class FirstLayer {
        public:
            typedef T
                TYPE_FIRST_INPUT ;
            //
            typedef typename
                TYPE_FIRST_INPUT::TYPE_DATA
                TYPE_DATA ;
            //
            typedef TYPE_FIRST_INPUT
                TYPE_INPUT ;
            //
            typedef TYPE_INPUT
                TYPE_OUTPUT ;
            //
            typedef Nothing
                TYPE_PARAMETER ;
            //
            typedef FirstLayer
                <TYPE_FIRST_INPUT>
                TYPE_SELF ;
            //
            inline static bool constexpr
            FORWARD_GRAD () {
                return false ;
            }
            //
            inline static bool constexpr
            FORWARD_GRAD (
                TYPE_FIRST_INPUT const & in
            ) {
                return false ;
            }
            //
            inline static size_t constexpr
            SIZE_X () {
                return
                    TYPE_FIRST_INPUT
                        ::SIZE_X () ;
                //
            }
            //
            inline static constexpr
            size_t SIZE_Y () {
                return
                    TYPE_FIRST_INPUT
                        ::SIZE_Y () ;
                //
            }
            //
            inline static constexpr
            size_t SIZE () {
                return
                    TYPE_FIRST_INPUT
                        ::SIZE () ;
                //
            }
            //
            inline static constexpr
            size_t INDEX ()
            { return 0 ; }
            //
            inline void
            GET_LAYER_REFERENCE (
                TYPE_SELF *& ref
            ) { ref = this ; }
            //
            inline void
            SET_FIRST_INPUT (
                TYPE_FIRST_INPUT * _INPUT
            ) { INPUT = _INPUT ; }
            //
            inline TYPE_OUTPUT const &
            GET_OUTPUT () const {
                return INPUT[0];
            }
            //
            inline void FORWARD () const {}
            //
            inline TYPE_FIRST_INPUT const &
            FORWARD (
                TYPE_FIRST_INPUT const & in
            ) {
                INPUT = & in ;
                return INPUT[0] ;
            }
            //
            template <typename Tin>
            inline void BACKWARD (
                Tin const & in
            ) const {}
            //
            inline void ATTACH (
                TYPE_PARAMETER const * _PARS
            ) const {}
            //
            inline void ATTACH (
                TYPE_PARAMETER const & _PARS
            ) const {}
            //
            inline void UPDATE (
                TYPE_DATA const Eta=0.01
            ) const {}
            //
            TYPE_FIRST_INPUT const * INPUT ;
            //
            inline void CONSTRUCT () {}
            //
        } ;
    }
    namespace NN /* BaseNNType */ {
        template <
            size_t   X         ,
            typename inputtype ,
            typename selftype
        > class BaseNNType {
        public:
            //
            typedef inputtype TYPE_INPUT ;
            //
            typedef typename TYPE_INPUT::TYPE_FIRST_INPUT
                TYPE_FIRST_INPUT ;
            //
            typedef typename TYPE_INPUT::TYPE_DATA
                TYPE_DATA ;
            //
            typedef selftype TYPE_PROXY ;
            //
            inline TYPE_PROXY &
            SELF () {
                return static_cast
                    < TYPE_PROXY & >
                    ( this[0] ) ;
            }
            //
            inline TYPE_PROXY const &
            SELF () const {
                return static_cast
                    < TYPE_PROXY const & >
                    ( this[0] ) ;
            }
            //
            static inline size_t constexpr
            SIZE_Y () {
                return TYPE_INPUT::SIZE_Y () ;
            }
            //
            static inline size_t constexpr
            SIZE_X () {
                return X ;
            }
            //
            typedef BaseNNType <
                SIZE_Y ()  ,
                TYPE_INPUT ,
                TYPE_PROXY
            > TYPE_SELF ;
            //
            typedef N2D_ARRAY <
                TYPE_INPUT::SIZE_Y(),
                TYPE_INPUT::SIZE_X(),
                TYPE_DATA
            > TYPE_MATRIX_INPUT ;
            //
            typedef N2D_ARRAY <
                SIZE_Y(),
                SIZE_X(),
                TYPE_DATA
            > TYPE_MATRIX_OUTPUT ;
            //
            typedef PARAMETER <
                TYPE_MATRIX_OUTPUT::SIZE_X () ,
                TYPE_MATRIX_INPUT::SIZE_X  () ,
                TYPE_DATA
            > TYPE_PARAMETER ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            FORWARD ( TYPE_FIRST_INPUT const & in ) {
                return SELF()
                    .MAIN_FORWARD
                    (INPUT.FORWARD(in)) ;
            }
            //
            inline TYPE_MATRIX_OUTPUT &
            GET_OUTPUT ()
            { return OUTPUT ; }
            //
            inline TYPE_MATRIX_OUTPUT const &
            GET_OUTPUT () const
            { return OUTPUT ; }
            //
            inline void SET_FIRST_INPUT
            (TYPE_FIRST_INPUT * _INPUT)
            { INPUT.SET_FIRST_INPUT (_INPUT) ; }
            //
            inline static size_t
            constexpr INDEX ()
            { return TYPE_INPUT::INDEX() + 1 ; }
            //
            template <typename T>
            inline void GET_LAYER_REFERENCE
            (T *& ref) { INPUT.GET_LAYER_REFERENCE(ref); }
            //
            inline void GET_LAYER_REFERENCE
            ( TYPE_PROXY * & ref )
            { ref = & SELF () ; }
            //
            inline void GET_LAYER_REFERENCE
            ( TYPE_PROXY const * & ref ) const
            { ref = & SELF () ; }
            //
            inline void
            CONSTRUCT () {
                SELF().MAIN_CONSTRUCT () ;
                INPUT.CONSTRUCT () ;
            }
            //
            inline void MAIN_CONSTRUCT () {}
            //
            inline TYPE_MATRIX_OUTPUT const & MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                /* Do Stuff Here... */
                printf(" This should not have been called... MAIN_FORWARD ");
                return this->GET_OUTPUT();
            }
            //
            TYPE_INPUT INPUT ;
            //
            TYPE_MATRIX_OUTPUT OUTPUT ;
            //
        } ;
    }
    namespace NN /* BaseNNTypeTrainable */ {
        template <
            size_t   X         ,
            typename inputtype ,
            typename selftype
        > class BaseNNTypeTrainable :
        public BaseNNType <
            X , inputtype ,
            selftype
        > {
            //
        public:
            //
            typedef BaseNNType <
                X , inputtype ,
                selftype
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_PARAMETER
                TYPE_DELTA_PARAMETER ;
            //
            typedef PARAMETER_ADAM
                <TYPE_DELTA_PARAMETER>
                TYPE_PARAMETER ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            inline TYPE_MATRIX_INPUT const &
            BACKWARD (
                TYPE_MATRIX_OUTPUT const & delta
            ) {
                //
                TYPE_MATRIX_INPUT const &
                    delta_prime =
                        this->SELF()
                        .MAIN_BACKWARD(delta) ;
                //
                if (false) {
                    auto norm =
                        DELTA_PRIME.L2_NORM();
                    //
                    DELTA_PRIME /= norm ;
                    //
                }
                //
                this->INPUT.BACKWARD
                    ( delta_prime ) ;
                //
                return delta_prime ;
                //
            }
            //
            inline TYPE_MATRIX_INPUT &
            GET_DELTA_PRIME ()
            { return DELTA_PRIME ; }
            //
            inline TYPE_MATRIX_INPUT const &
            GET_DELTA_PRIME () const
            { return DELTA_PRIME ; }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD
            ( TYPE_MATRIX_OUTPUT const & in ) {
                printf(" This should not have been called... MAIN_BACKWARD ");
                return GET_DELTA_PRIME () ;
            }
            //
            inline void UPDATE
            ( TYPE_DATA const Eta=0.01 ) {
                this->SELF()
                    .MAIN_UPDATE(Eta);
                //
                this->INPUT.UPDATE (Eta) ;
            }
            //
            inline void MAIN_UPDATE
            ( TYPE_DATA const Eta=0.01 ) {}
            //
            TYPE_MATRIX_INPUT DELTA_PRIME ;
            //
        } ;
    }
    namespace NN /* BaseNNTypeTrainableGrad */ {
        template <
            size_t   X         ,
            typename inputtype ,
            typename selftype
        > class BaseNNTypeTrainableGrad :
        public BaseNNTypeTrainable <
            X , inputtype ,
            selftype
        > {
            //
        public:
            //
            typedef
                BaseNNTypeTrainableGrad <
                    X , inputtype ,
                    selftype
                > TYPE_SELF ;
            //
            typedef
                BaseNNTypeTrainable <
                    X , inputtype ,
                    selftype
                > TYPE_PARENT ;
            //
            typedef typename
                TYPE_PARENT::TYPE_DATA
                    TYPE_DATA ;
            //
            typedef typename
                TYPE_PARENT::TYPE_FIRST_INPUT
                    TYPE_FIRST_INPUT ;
            //
            typedef selftype
                TYPE_PROXY ;
            //
            ////////////////////////////////////////////////////////////////
            // y = TYPE_PARENT::SIZE_X()           /////////////////////////
            // b = TYPE_PARENT::SIZE_Y()           /////////////////////////
            // m = TYPE_FIRST_INPUT::SIZE_X()      /////////////////////////
            // x = TYPE_SELF::TYPE_INPUT::SIZE_X() /////////////////////////
            ////////////////////////////////////////////////////////////////
            //
            typedef N3D_ARRAY <
                TYPE_PARENT::SIZE_Y      () ,
                TYPE_PARENT::SIZE_X      () ,
                TYPE_FIRST_INPUT::SIZE_X () ,
                TYPE_DATA
            > TYPE_GRAD_OUTPUT ;
            //
            typedef N3D_ARRAY <
                TYPE_PARENT::SIZE_Y           () ,
                TYPE_SELF::TYPE_INPUT::SIZE_X () ,
                TYPE_FIRST_INPUT::SIZE_X      () ,
                TYPE_DATA
            > TYPE_GRAD_INPUT ;
            //
            TYPE_GRAD_OUTPUT GRAD ;
            //
            inline TYPE_GRAD_OUTPUT &
            GET_GRAD () {
                return GRAD ;
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            GET_GRAD () const {
                return GRAD ;
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            FORWARD_GRAD () {
                return
                    this->SELF()
                        .MAIN_FORWARD_GRAD(
                            this->INPUT
                                .FORWARD_GRAD()
                        );
                //
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            FORWARD_GRAD (
                TYPE_FIRST_INPUT const & in
            ) {
                this->FORWARD(in); //
                return
                    this->SELF()
                        .MAIN_FORWARD_GRAD (
                            this->INPUT
                                .FORWARD_GRAD()
                        )
                ; //
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            MAIN_FORWARD_GRAD (
                TYPE_GRAD_INPUT const & in
            ) {
                printf("This should not have been called... MAIN_FORWARD_GRAD\n");
                return GET_GRAD();
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            MAIN_FORWARD_GRAD (
                bool const in
            ) {
                printf("This should not have been called... MAIN_FORWARD_GRAD\n");
                return GET_GRAD();
            }
        } ;
    }
    ////////////////////////////////////////////////////////////////
    namespace NN /* Main multiplying layer */ {
        template <size_t Y, typename inputtype>
        class MainNNLayer : public
        BaseNNType <
            Y , inputtype ,
            MainNNLayer
                < Y , inputtype >
        > {
        public:
            typedef BaseNNType <
                Y , inputtype ,
                MainNNLayer
                    < Y , inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_PARAMETER
                TYPE_PARAMETER ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const & MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                FUNCTIONS::NeuralMultiply (
                    this->GET_OUTPUT () ,
                    PARAMETER->WEIGHT   ,
                    in                  ,
                    PARAMETER->BIAS
                ) ;
                return this->GET_OUTPUT () ;
            }
            //
            inline void ATTACH_PARAMETER
            ( TYPE_PARAMETER & in )
            { PARAMETER = & in ; }
            //
            TYPE_PARAMETER * PARAMETER ;
            //
        } ;
    }
    namespace NN /* Activation layer: SoftLRU */ {
        template <typename inputtype>
        class ActivateSoftLRU : public
        BaseNNType <
            inputtype::SIZE_X() , inputtype ,
            ActivateSoftLRU < inputtype >
        > {
        public:
            typedef BaseNNType <
                inputtype::SIZE_X() , inputtype ,
                ActivateSoftLRU < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            SOFT_LRU ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    return x / ( 1.0 - x ) ;
                } else {
                    return x ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const & MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for ( size_t i=0 ; i<tmp_in.SIZE() ; i++ )
                { tmp_out[i] = SOFT_LRU (tmp_in[i]) ; }
                //
                return this->GET_OUTPUT () ;
            }
            //
        } ;
    }
    namespace NN /* Activation layer: SoftSign */ {
        template <typename inputtype>
        class ActivateSoftSign : public
        BaseNNType <
            inputtype::SIZE_Y() , inputtype ,
            ActivateSoftSign < inputtype >
        > {
        public:
            typedef BaseNNType <
                inputtype::SIZE_Y() , inputtype ,
                ActivateSoftSign < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            SOFT_SIGN ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    return x / ( 1.0 - x ) ;
                } else {
                    return x / ( 1.0 + x ) ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const & MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for ( size_t i=0 ; i<tmp_in.SIZE() ; i++ )
                { tmp_out[i] = SOFT_SIGN (tmp_in[i]) ; }
                //
                return this->GET_OUTPUT () ;
            }
            //
        } ;
    }
    ////////////////////////////////////////////////////////////////
    namespace NN /* Main trainable layer */ {
        template <size_t Y, typename inputtype>
        class MainNNLayerTrainable : public
        BaseNNTypeTrainable <
            Y , inputtype ,
            MainNNLayerTrainable
                < Y , inputtype >
        > {
            //
        public:
            //
            typedef BaseNNTypeTrainable <
                Y , inputtype ,
                MainNNLayerTrainable
                    < Y , inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DELTA_PARAMETER
                    TYPE_DELTA_PARAMETER ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_PARAMETER
                TYPE_PARAMETER ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                FUNCTIONS::NeuralMultiply (
                    this->GET_OUTPUT () ,
                    PARAMETER->WEIGHT   ,
                    in                  ,
                    PARAMETER->BIAS
                ) ;
                return this->GET_OUTPUT () ;
            }
            //
            inline void ATTACH_PARAMETER
            ( TYPE_PARAMETER & in )
            { PARAMETER = & in ; }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD
            ( TYPE_MATRIX_OUTPUT const & in ) {
                //
                in2.GET_SQUARED(in);
                //
                INPUT2.GET_SQUARED
                    (this->INPUT.GET_OUTPUT());
                //
                FUNCTIONS::BackProp (
                    this->GET_DELTA_PRIME() ,
                    in , PARAMETER->WEIGHT
                ) ;
                //
                FUNCTIONS::EvalW (
                    DP[0].WEIGHT , in ,
                    this->INPUT.GET_OUTPUT()
                ) ;
                //
                FUNCTIONS::EvalW (
                    DP[1].WEIGHT ,
                    in2 , INPUT2
                ) ;
                //
                for(
                    size_t b=0;
                    b<TYPE_MATRIX_OUTPUT::SIZE_Y();
                    b++
                ) { DP[0].BIAS+=in[b]; }
                //
                for(
                    size_t b=0;
                    b<TYPE_MATRIX_OUTPUT::SIZE_Y();
                    b++
                ) { DP[1].BIAS+=in2[b]; }
                //
                return this->
                    GET_DELTA_PRIME() ;
                //
            }
            //
            inline void MAIN_CONSTRUCT ()
            { DP[0]=0.0; DP[1]=0.0; }
            //
            inline void
            MAIN_UPDATE (
                TYPE_DATA const Eta=0.01
            ) {
                //auto norm = DP[0].WEIGHT.L2_NORM () ;
                //DP[0] /= norm ;
                //DP[1] /= (norm*norm) ;
                PARAMETER->UPDATE (
                    /* _M  = */ DP[0] ,
                    /* _V  = */ DP[1] ,
                    /* Eta = */ Eta
                ) ;
                DP[0]=0; DP[1]=0;
            }
            //
            MainNNLayerTrainable()
            { MAIN_CONSTRUCT () ; }
            //
            TYPE_PARAMETER * PARAMETER ;
            //
        private:
            //
            TYPE_MATRIX_INPUT INPUT2 ;
            TYPE_MATRIX_OUTPUT in2 ;
            TYPE_DELTA_PARAMETER DP[2] ;
            //
        } ;
    }
    namespace NN /* Activation layer: SoftLRUTrainable */ {
        template <typename inputtype>
        class ActivateSoftLRUTrainable :
        public BaseNNTypeTrainable <
            inputtype::SIZE_X() , inputtype ,
            ActivateSoftLRUTrainable
                < inputtype >
        > {
        public:
            typedef BaseNNTypeTrainable <
                inputtype::SIZE_X() , inputtype ,
                ActivateSoftLRUTrainable
                    < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            REAL_ACTIVATE ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    return x / ( 1.0 - x ) ;
                } else {
                    return x ;
                }
            }
            //
            static inline TYPE_DATA
            REAL_ACTIVATE_D ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    TYPE_DATA tmp = 1.0 - x ;
                    return 1.0 / ( tmp * tmp ) ;
                } else {
                    return 1.0 ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                //
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_in.SIZE() ;
                    i++
                ) {
                    tmp_out[i] =
                        REAL_ACTIVATE (tmp_in[i]) ;
                }
                //
                return this->GET_OUTPUT () ;
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD
            ( TYPE_MATRIX_OUTPUT const & delta ) {
                //
                auto & tmp_in =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & tmp_delta =
                    delta.FLATTEN () ;
                //
                auto & tmp_delta_prime =
                    this->GET_DELTA_PRIME()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_delta_prime.SIZE() ;
                    i++
                ) {
                    tmp_delta_prime[i] =
                        REAL_ACTIVATE_D (tmp_in[i]) *
                        tmp_delta[i] ;
                }
                //
                return this->
                    GET_DELTA_PRIME () ;
                //
            }
            //
        } ;
    }
    namespace NN /* Activation layer: ActivateSoftLRUPTrainable */ {
        template <typename inputtype>
        class ActivateSoftLRUPTrainable :
        public BaseNNTypeTrainable <
            inputtype::SIZE_X() , inputtype ,
            ActivateSoftLRUPTrainable
                < inputtype >
        > {
        public:
            typedef BaseNNTypeTrainable <
                inputtype::SIZE_X() , inputtype ,
                ActivateSoftLRUPTrainable
                    < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            REAL_ACTIVATE ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    return 1.0  / ( 1.0 - x ) ;
                } else {
                    return 1.0 + x ;
                }
            }
            //
            static inline TYPE_DATA
            REAL_ACTIVATE_D ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    TYPE_DATA tmp = 1.0 - x ;
                    return 1.0 / ( tmp * tmp ) ;
                } else {
                    return 1.0 ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                //
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_in.SIZE() ;
                    i++
                ) {
                    tmp_out[i] =
                        REAL_ACTIVATE (tmp_in[i]) ;
                }
                //
                return this->GET_OUTPUT () ;
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD
            ( TYPE_MATRIX_OUTPUT const & delta ) {
                //
                auto & tmp_in =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & tmp_delta =
                    delta.FLATTEN () ;
                //
                auto & tmp_delta_prime =
                    this->GET_DELTA_PRIME()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_delta_prime.SIZE() ;
                    i++
                ) {
                    tmp_delta_prime[i] =
                        REAL_ACTIVATE_D (tmp_in[i]) *
                        tmp_delta[i] ;
                    //
                }
                //
                return this->
                    GET_DELTA_PRIME () ;
                //
            }
            //
        } ;
    }
    namespace NN /* Activation layer: ActivateSoftSignTrainable */ {
        template <typename inputtype>
        class ActivateSoftSignTrainable :
        public BaseNNTypeTrainable <
            inputtype::SIZE_X() , inputtype ,
            ActivateSoftSignTrainable
                < inputtype >
        > {
        public:
            typedef BaseNNTypeTrainable <
                inputtype::SIZE_X() , inputtype ,
                ActivateSoftSignTrainable
                    < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            REAL_ACTIVATE ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    return x / ( 1.0 - x ) ;
                } else {
                    return x / ( 1.0 + x ) ;
                }
            }
            //
            static inline TYPE_DATA
            REAL_ACTIVATE_D ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    TYPE_DATA tmp = 1.0 - x ;
                    return 1.0 / ( tmp * tmp ) ;
                } else {
                    TYPE_DATA tmp = 1.0 + x ;
                    return 1.0 / ( tmp * tmp ) ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in ) {
                //
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_in.SIZE() ;
                    i++
                ) {
                    tmp_out[i] =
                        REAL_ACTIVATE (tmp_in[i]) ;
                }
                //
                return this->GET_OUTPUT () ;
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD
            ( TYPE_MATRIX_OUTPUT const & delta ) {
                //
                auto & tmp_in =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & tmp_delta =
                    delta.FLATTEN () ;
                //
                auto & tmp_delta_prime =
                    this->GET_DELTA_PRIME()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_delta_prime.SIZE() ;
                    i++
                ) {
                    tmp_delta_prime[i] =
                        REAL_ACTIVATE_D (tmp_in[i]) *
                        tmp_delta[i] ;
                }
                //
                return this->
                    GET_DELTA_PRIME () ;
                //
            }
            //
        } ;
    }
    namespace NN /* The Last Layer: */ {
        template <typename input>
        class Teacher :
        public BaseNNType <
            input::SIZE_X() ,
            input ,
            Teacher <input>
        > {
            //
        public:
            //
            typedef BaseNNType <
                input::SIZE_X() ,
                input ,
                Teacher <input>
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD
            ( TYPE_MATRIX_INPUT const & in )
            { return in ; }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD
            ( TYPE_MATRIX_OUTPUT const & in ) {
                //
                auto & delta =
                    this->GET_OUTPUT()
                    .FLATTEN() ;
                //
                auto & INP =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & flat_in =
                    in.FLATTEN();
                //
                for(size_t i=0;i<delta.SIZE();i++) {
                    delta[i]=INP[i]-flat_in[i];
                }
                //
                return this->
                    GET_OUTPUT() ;
                //
            }
            //
            inline TYPE_MATRIX_INPUT const &
            BACKWARD (
                TYPE_MATRIX_OUTPUT const & delta
            ) {
                //
                TYPE_MATRIX_INPUT const &
                    delta_prime =
                        MAIN_BACKWARD(delta) ;
                //
                this->INPUT.BACKWARD
                    ( delta_prime ) ;
                //
                return delta_prime ;
                //
            }
            //
            inline void UPDATE
            ( TYPE_DATA const Eta=0.01 )
            { this->INPUT.UPDATE (Eta) ; }
            //
        } ;
    }
    namespace NN /* Activation layer: ActivateL2NormalizerTrainable */ {
        template <typename inputtype>
        class ActivateL2NormalizerTrainable :
        public BaseNNTypeTrainable <
            inputtype::SIZE_X() ,
            inputtype ,
            ActivateL2NormalizerTrainable
                < inputtype >
        > {
            //
        public:
            //
            typedef BaseNNTypeTrainable <
                inputtype::SIZE_X() ,
                inputtype ,
                ActivateL2NormalizerTrainable
                    < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            typedef ND_ARRAY <
                TYPE_MATRIX_INPUT::SIZE_X(),
                TYPE_DATA
            > TYPE_ACTIVATOR_ARRAY ;
            //
            typedef ND_ARRAY <
                TYPE_MATRIX_INPUT::SIZE_Y(),
                TYPE_DATA
            > TYPE_DENOMINATOR_ARRAY ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD (
                TYPE_MATRIX_INPUT const & in
            ) {
                //
                for(
                    size_t i=0;
                    i<DENOMINATOR.SIZE();
                    i++
                ) {
                    DENOMINATOR[i] =
                        in[i].L2_NORM () ;
                }
                //
                auto & out =
                    this->GET_OUTPUT () ;
                //
                for(
                    size_t i=0;
                    i<in.SIZE_Y();
                    i++
                ){
                    out[i].GET_SQUARED(
                        in[i],
                        DENOMINATOR[i]
                    );
                }
                //
                return out ;
                //
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD (
                TYPE_MATRIX_OUTPUT const & delta
            ) {
                auto & delta_prime =
                    this->GET_DELTA_PRIME () ;
                //
                auto const & in =
                    this->INPUT.GET_OUTPUT();
                //
                for(
                    size_t b=0;
                    b<SUM.SIZE();
                    b++
                ) {
                    SUM[b]=0.0;
                    for(
                        size_t i=0;
                        i<in.SIZE_X();
                        i++
                    ){
                        SUM[b]+=
                            delta[b][i] *
                            in[b][i]    *
                            in[b][i]    ;
                    }
                }
                for(
                    size_t b=0;
                    b<SUM.SIZE();
                    b++
                ) {
                    SUM[b]/=(
                        DENOMINATOR[b]*
                        DENOMINATOR[b]
                    );
                }
                //
                for(
                    size_t b=0;
                    b<TYPE_MATRIX_INPUT::SIZE_Y();
                    b++
                ) {
                    for(
                        size_t k=0;
                        k<TYPE_MATRIX_INPUT::SIZE_X();
                        k++
                    ) {
                        delta_prime[b][k] =
                            2.0 * in[b][k] * (
                                +(delta[b][k]/DENOMINATOR[b])
                                -SUM[b]
                            ) ;
                        //
                    }
                    //
                }
                //
                return this->
                    GET_DELTA_PRIME () ;
                //
            }
            //
            TYPE_DENOMINATOR_ARRAY
                DENOMINATOR ;
            //
            TYPE_DENOMINATOR_ARRAY
                SUM ;
            //
        } ;
    }
    ////////////////////////////////////////////////////////////////
    namespace NN /* Main trainable layer with gradient */ {
        template <size_t Y, typename inputtype>
        class MainNNLayerTrainableGrad : public
        BaseNNTypeTrainableGrad <
            Y , inputtype ,
            MainNNLayerTrainableGrad
                < Y , inputtype >
        > {
            //
        public:
            //
            typedef BaseNNTypeTrainableGrad <
                Y , inputtype ,
                MainNNLayerTrainableGrad
                    < Y , inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DELTA_PARAMETER
                    TYPE_DELTA_PARAMETER ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_PARAMETER
                TYPE_PARAMETER ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_GRAD_OUTPUT
                    TYPE_GRAD_OUTPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_GRAD_INPUT
                    TYPE_GRAD_INPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD (
                TYPE_MATRIX_INPUT const & in
            ) {
                FUNCTIONS::NeuralMultiply (
                    this->GET_OUTPUT () ,
                    PARAMETER->WEIGHT   ,
                    in                  ,
                    PARAMETER->BIAS
                ) ;
                return this->GET_OUTPUT () ;
            }
            //
            inline void
            ATTACH_PARAMETER (
                TYPE_PARAMETER & in
            ) {
                PARAMETER = & in ;
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD (
                TYPE_MATRIX_OUTPUT const & in
            ) {
                //
                in2.GET_SQUARED(in);
                //
                INPUT2.GET_SQUARED (
                    this->INPUT.GET_OUTPUT()
                );
                //
                FUNCTIONS::BackProp (
                    this->GET_DELTA_PRIME() ,
                    in , PARAMETER->WEIGHT
                ) ;
                //
                FUNCTIONS::EvalW (
                    DP[0].WEIGHT , in ,
                    this->INPUT.GET_OUTPUT()
                ) ;
                //
                FUNCTIONS::EvalW (
                    DP[1].WEIGHT ,
                    in2 , INPUT2
                ) ;
                //
                for(
                    size_t b=0;
                    b<TYPE_MATRIX_OUTPUT::SIZE_Y();
                    b++
                ) { DP[0].BIAS+=in[b]; }
                //
                for(
                    size_t b=0;
                    b<TYPE_MATRIX_OUTPUT::SIZE_Y();
                    b++
                ) { DP[1].BIAS+=in2[b]; }
                //
                return this->
                    GET_DELTA_PRIME() ;
                //
            }
            //
            inline void
            MAIN_CONSTRUCT () {
                DP[0]=0.0;
                DP[1]=0.0;
            }
            //
            inline void
            MAIN_UPDATE (
                TYPE_DATA const Eta=0.01
            ) {
                //auto norm = DP[0].WEIGHT.L2_NORM () ;
                //DP[0] /= norm ;
                //DP[1] /= (norm*norm) ;
                PARAMETER->UPDATE (
                    /* _M  = */ DP[0] ,
                    /* _V  = */ DP[1] ,
                    /* Eta = */ Eta
                ) ;
                DP[0]=0;
                DP[1]=0;
            }
            //
            MainNNLayerTrainableGrad()
            { MAIN_CONSTRUCT () ; }
            //
            TYPE_PARAMETER * PARAMETER ;
            //
            inline TYPE_GRAD_OUTPUT const &
            MAIN_FORWARD_GRAD (
                TYPE_GRAD_INPUT const &
                    in
            ) {
                FUNCTIONS::GRAD_PROPAGATE(
                    this->GET_GRAD()  ,
                    PARAMETER->WEIGHT ,
                    in
                );
                return this->GET_GRAD();
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            MAIN_FORWARD_GRAD (
                bool const in
            ) {
                FUNCTIONS::GRAD_PROPAGATE(
                    this->GET_GRAD()  ,
                    PARAMETER->WEIGHT ,
                    in
                );
                return this->GET_GRAD();
            }
            //
        private:
            //
            TYPE_MATRIX_INPUT    INPUT2 ;
            TYPE_MATRIX_OUTPUT   in2    ;
            TYPE_DELTA_PARAMETER DP[2]  ;
            //
        } ;
    }
    namespace NN /* Activation layer: SoftLRUTrainableGrad */ {
        template <typename inputtype>
        class ActivateSoftLRUTrainableGrad :
        public BaseNNTypeTrainableGrad <
            inputtype::SIZE_X() , inputtype ,
            ActivateSoftLRUTrainableGrad
                < inputtype >
        > {
        public:
            typedef BaseNNTypeTrainableGrad <
                inputtype::SIZE_X() , inputtype ,
                ActivateSoftLRUTrainableGrad
                    < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            REAL_ACTIVATE (
                TYPE_DATA const x
            ) {
                if ( x < 0 ) {
                    return x / ( 1.0 - x ) ;
                } else {
                    return x ;
                }
            }
            //
            static inline TYPE_DATA
            REAL_ACTIVATE_D (
                TYPE_DATA const x
            ) {
                if ( x < 0 ) {
                    TYPE_DATA tmp = 1.0 - x ;
                    return 1.0 / ( tmp * tmp ) ;
                } else {
                    return 1.0 ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_GRAD_OUTPUT
                TYPE_GRAD_OUTPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_GRAD_INPUT
                TYPE_GRAD_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD (
                TYPE_MATRIX_INPUT const & in
            ) {
                //
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_in.SIZE() ;
                    i++
                ) {
                    tmp_out[i] =
                        REAL_ACTIVATE (tmp_in[i]) ;
                }
                //
                return this->GET_OUTPUT () ;
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD (
                TYPE_MATRIX_OUTPUT const & delta
            ) {
                //
                auto & tmp_in =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & tmp_delta =
                    delta.FLATTEN () ;
                //
                auto & tmp_delta_prime =
                    this->GET_DELTA_PRIME()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_delta_prime.SIZE() ;
                    i++
                ) {
                    tmp_delta_prime[i] =
                        REAL_ACTIVATE_D (tmp_in[i]) *
                        tmp_delta[i] ;
                }
                //
                return this->
                    GET_DELTA_PRIME () ;
                //
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            MAIN_FORWARD_GRAD (
                TYPE_GRAD_INPUT const & in
            ) {
                auto & Input =
                    this->INPUT
                        .GET_OUTPUT() ;
                //
                auto & Output =
                    this->GET_GRAD() ;
                //
                for(size_t b=0;b<in.SIZE_Z();b++){
                    for(size_t i=0;i<in.SIZE_Y();i++){
                        for(size_t m=0;m<in.SIZE_X();m++){
                            Output[b][i][m] =
                                REAL_ACTIVATE_D (Input[b][i])
                                * in[b][i][m] ;
                        }
                    }
                }
                //
                return Output;
                //
            }
        } ;
    }
    namespace NN /* Activation layer: SoftLRUPTrainableGrad */ {
        template <typename inputtype>
        class ActivateSoftLRUPTrainableGrad :
        public BaseNNTypeTrainableGrad <
            inputtype::SIZE_X() , inputtype ,
            ActivateSoftLRUPTrainableGrad
                < inputtype >
        > {
        public:
            typedef BaseNNTypeTrainableGrad <
                inputtype::SIZE_X() , inputtype ,
                ActivateSoftLRUPTrainableGrad
                    < inputtype >
            > TYPE_BASE_CLASS ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA ;
            //
            static inline TYPE_DATA
            REAL_ACTIVATE ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    return 1.0  / ( 1.0 - x ) ;
                } else {
                    return 1.0 + x ;
                }
            }
            //
            static inline TYPE_DATA
            REAL_ACTIVATE_D ( TYPE_DATA const x ) {
                if ( x < 0 ) {
                    TYPE_DATA tmp = 1.0 - x ;
                    return 1.0 / ( tmp * tmp ) ;
                } else {
                    return 1.0 ;
                }
            }
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_GRAD_OUTPUT
                TYPE_GRAD_OUTPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_GRAD_INPUT
                TYPE_GRAD_INPUT ;
            //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT ;
            //
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD (
                TYPE_MATRIX_INPUT const & in
            ) {
                //
                auto & tmp_in =
                    in.FLATTEN () ;
                //
                auto & tmp_out =
                    this->GET_OUTPUT()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_in.SIZE() ;
                    i++
                ) {
                    tmp_out[i] =
                        REAL_ACTIVATE (tmp_in[i]) ;
                }
                //
                return this->GET_OUTPUT () ;
            }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD (
                TYPE_MATRIX_OUTPUT const & delta
            ) {
                //
                auto & tmp_in =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & tmp_delta =
                    delta.FLATTEN () ;
                //
                auto & tmp_delta_prime =
                    this->GET_DELTA_PRIME()
                        .FLATTEN() ;
                //
                for (
                    size_t i=0 ;
                    i<tmp_delta_prime.SIZE() ;
                    i++
                ) {
                    tmp_delta_prime[i] =
                        REAL_ACTIVATE_D (tmp_in[i]) *
                        tmp_delta[i] ;
                }
                //
                return this->
                    GET_DELTA_PRIME () ;
                //
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            MAIN_FORWARD_GRAD (
                TYPE_GRAD_INPUT const & in
            ) {
                auto & Input =
                    this->INPUT
                        .GET_OUTPUT() ;
                //
                auto & Output =
                    this->GET_GRAD() ;
                //
                for(size_t b=0;b<in.SIZE_Z();b++){
                    for(size_t i=0;i<in.SIZE_Y();i++){
                        for(size_t m=0;m<in.SIZE_X();m++){
                            Output[b][i][m] =
                                REAL_ACTIVATE_D (Input[b][i])
                                * in[b][i][m] ;
                        }
                    }
                }
                //
                return Output;
                //
            }
        } ;
    }
    namespace NN /* The Last Layer grad: */ {
        template <typename input>
        class TeacherGrad :
        public BaseNNType <
            input::SIZE_X() ,
            input ,
            TeacherGrad <input>
        > {
            //
        public:
////////////////////////////////////////////////////////////////
            typedef BaseNNType <
                input::SIZE_X() ,
                input ,
                TeacherGrad <input>
            > TYPE_BASE_CLASS
            ; //
            typedef
                TeacherGrad <input>
                TYPE_SELF
            ; //
            typedef typename
                TYPE_SELF::TYPE_FIRST_INPUT
                TYPE_FIRST_INPUT
            ; //
            typedef typename
                TYPE_BASE_CLASS::TYPE_DATA
                TYPE_DATA
            ; //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_INPUT
                TYPE_MATRIX_INPUT
            ; //
            typedef typename
                TYPE_BASE_CLASS::TYPE_MATRIX_OUTPUT
                TYPE_MATRIX_OUTPUT
            ; //
            typedef typename
                TYPE_BASE_CLASS::TYPE_INPUT
                    ::TYPE_GRAD_OUTPUT
                TYPE_GRAD_OUTPUT
            ; //
////////////////////////////////////////////////////////////////
            inline TYPE_MATRIX_OUTPUT const &
            MAIN_FORWARD (
                TYPE_MATRIX_INPUT const & in
            ) { return in ; }
            //
            inline TYPE_MATRIX_INPUT const &
            MAIN_BACKWARD (
                TYPE_MATRIX_OUTPUT const & in
            ) {
                //
                auto & delta =
                    this->GET_OUTPUT()
                    .FLATTEN() ;
                //
                auto & INP =
                    this->INPUT
                        .GET_OUTPUT()
                        .FLATTEN() ;
                //
                auto & flat_in =
                    in.FLATTEN();
                //
                for(size_t i=0;i<delta.SIZE();i++) {
                    delta[i]=INP[i]-flat_in[i];
                }
                //
                return this->
                    GET_OUTPUT() ;
                //
            }
            //
            inline TYPE_MATRIX_INPUT const &
            BACKWARD (
                TYPE_MATRIX_OUTPUT const & delta
            ) {
                //
                TYPE_MATRIX_INPUT const &
                    delta_prime =
                        MAIN_BACKWARD(delta) ;
                //
                this->INPUT.BACKWARD
                    ( delta_prime ) ;
                //
                return delta_prime ;
                //
            }
            //
            inline void UPDATE
            ( TYPE_DATA const Eta=0.01 )
            { this->INPUT.UPDATE (Eta) ; }
            //
            inline TYPE_GRAD_OUTPUT const &
            FORWARD_GRAD () {
                return
                    this->INPUT
                        .FORWARD_GRAD()
                ; //
            }
            //
            inline TYPE_GRAD_OUTPUT const &
            FORWARD_GRAD (
                TYPE_FIRST_INPUT const & in
            ) {
                this->FORWARD(in);
                return
                    this->INPUT
                        .FORWARD_GRAD()
                ; //
            }
            //

        } ;
    }
    ////////////////////////////////////////////////////////////////
}
#endif
